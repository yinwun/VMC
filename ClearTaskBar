using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WFP
{
    public partial class Form1 : Form
    {
        [DllImport("User32.dll", EntryPoint = "FindWindow", CharSet = CharSet.Auto)]
        public static extern IntPtr FindWindow(String className, String captionName);

        [DllImport("user32.dll", EntryPoint = "FindWindowEx", SetLastError = true)]
        static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);

        [DllImport("user32.dll", EntryPoint = "ShowWindow", SetLastError = true)]
        static extern bool ShowWindow(IntPtr hWnd, uint nCmdShow);

        [DllImport("user32.dll", EntryPoint = "SendMessage")]
        private static extern int SendMessage(IntPtr hwnd, int wMsg, int wParam, int lParam);

        [DllImport("user32.dll")]
        private static extern int GetWindowRect(IntPtr hwnd, out Rect lpRect);

        [DllImport("user32.dll", SetLastError = true)]
        static extern bool PostMessage(IntPtr hWnd, uint Msg, int wParam, int lParam);

        [System.Runtime.InteropServices.DllImport("user32")]
        private static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);

        private const int MOUSEEVENTF_MOVE = 0x0001;// 移动鼠标
        private const int MOUSEEVENTF_LEFTDOWN = 0x0002; //模拟鼠标左键按下
        private const int MOUSEEVENTF_LEFTUP = 0x0004; //模拟鼠标左键抬起
        private const int MOUSEEVENTF_RIGHTDOWN = 0x0008; //模拟鼠标右键按下
        private const int MOUSEEVENTF_RIGHTUP = 0x0010; //模拟鼠标右键抬起
        private const int MOUSEEVENTF_MIDDLEDOWN = 0x0020; //模拟鼠标中键按下
        private const int MOUSEEVENTF_MIDDLEUP = 0x0040; //模拟鼠标中键抬起
        private const int MOUSEEVENTF_ABSOLUTE = 0x8000; //标示是否采用绝对坐标

        public Form1()
        {
            InitializeComponent();
        }

        private void btnClickMe1_Click(object sender, EventArgs e)
        {
            MessageBox.Show("1");
        }

        private void btnClickMe2_Click(object sender, EventArgs e)
        {
            MessageBox.Show("2");
        }

        private void btnClickMe3_Click(object sender, EventArgs e)
        {
            MessageBox.Show("3");
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            List<string> lstData = new List<string>();
            lstData.Add("A");
            lstData.Add("B");
            lstData.Add("C");
            cbData.DataSource = lstData;
        }

        public struct Rect
        {
            public int Left;
            public int Top;
            public int Right;
            public int Bottom;
        }
        private int WM_MOUSEMOVE = 0x0200;

        private void btnResh_Click(object sender, EventArgs e)
        {
            //任务栏窗口  
            //IntPtr maindHwnd = FindWindow(null, "ASSA"); //获得QQ登陆框的句柄
            IntPtr hShellTrayWnd = FindWindow("Shell_TrayWnd", null);
            //任务栏右边托盘图标+时间区  
            IntPtr hTrayNotifyWnd = FindWindowEx(hShellTrayWnd, IntPtr.Zero, "TrayNotifyWnd",null);//这里的1是，计算器上名字为1的按钮
            //不同系统可能有可能没有这层  
            IntPtr hSysPager = FindWindowEx(hTrayNotifyWnd, IntPtr.Zero, "SysPager",null);
            //托盘图标窗口  
            IntPtr hToolbarWindow32;
            if (hSysPager != IntPtr.Zero)
            {
                hToolbarWindow32 = FindWindowEx(hSysPager, IntPtr.Zero, "ToolbarWindow32",null);
            }
            else
            {
                hToolbarWindow32 = FindWindowEx(hTrayNotifyWnd, IntPtr.Zero, "ToolbarWindow32",null);
            }
            if (hToolbarWindow32 != IntPtr.Zero)
            {
                Rect rect = new Rect();
                GetWindowRect(hToolbarWindow32, out rect);
                int width = rect.Right - rect.Left; //窗口的宽度
                int height = rect.Bottom - rect.Top;//窗口的高度
                //int x = rect.Left;
                //int y = rect.Top;
                //从任务栏中间从左到右 MOUSEMOVE一遍，所有图标状态会被更新  
                for (int x = 1; x < width; x++)
                {
                    SendMessage(hToolbarWindow32, WM_MOUSEMOVE, 0, MakeLParam(x, height / 2));
                    //mouse_event(MOUSEEVENTF_MOVE, x, y, width, MakeLParam(x, height / 2));
                }
            }
        }

        private int MakeLParam(int LoWord, int HiWord)
        {
            return ((HiWord << 16) | (LoWord & 0xffff));
        }
    }
}

PostMessage(pl, WM_LBUTTONDOWN, 1,MakeLParam(70,20));
        PostMessage(pl, WM_LBUTTONUP, 0,MakeLParam(71,21));
