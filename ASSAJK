using AS外挂监控.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using MySql.Data.MySqlClient;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using ZhuH;

namespace AS外挂监控
{
	[DesignerGenerated]
	public class ZJ主界面 : Form
	{
		public struct JB句柄参数
		{
			public long JB句柄;

			public string BT标题;

			public string ZH账号;
		}

		public struct JB句柄遍历
		{
			public long JB句柄;

			public string BT标题;

			public string LM类名;
		}

		public struct JK监控列表数据
		{
			public string ZH账号;

			public string JS角色名称;

			public string JB脚本名称;

			public string DJ等级;

			public string XL血量;

			public string QL气力;
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("GroupBox6")]
		private GroupBox _GroupBox6;

		[AccessedThroughProperty("RichTextBox1")]
		private RichTextBox _RichTextBox1;

		[AccessedThroughProperty("Button16")]
		private Button _Button16;

		[AccessedThroughProperty("GroupBox7")]
		private GroupBox _GroupBox7;

		[AccessedThroughProperty("rw人物list")]
		private ListBox _rw人物list;

		[AccessedThroughProperty("fj副机list")]
		private ListBox _fj副机list;

		[AccessedThroughProperty("zj主机list")]
		private ListBox _zj主机list;

		[AccessedThroughProperty("jk监控账号list")]
		private ListBox _jk监控账号list;

		[AccessedThroughProperty("jb句柄list")]
		private ListBox _jb句柄list;

		[AccessedThroughProperty("js角色list")]
		private ListBox _js角色list;

		[AccessedThroughProperty("jb脚本list")]
		private ListBox _jb脚本list;

		[AccessedThroughProperty("pz配置list")]
		private ListBox _pz配置list;

		[AccessedThroughProperty("mm密码list")]
		private ListBox _mm密码list;

		[AccessedThroughProperty("zh账号list")]
		private ListBox _zh账号list;

		[AccessedThroughProperty("BB版本信息栏")]
		private TabPage _BB版本信息栏;

		[AccessedThroughProperty("GroupBox16")]
		private GroupBox _GroupBox16;

		[AccessedThroughProperty("Label19")]
		private Label _Label19;

		[AccessedThroughProperty("Label13")]
		private Label _Label13;

		[AccessedThroughProperty("Label18")]
		private Label _Label18;

		[AccessedThroughProperty("Label17")]
		private Label _Label17;

		[AccessedThroughProperty("Label16")]
		private Label _Label16;

		[AccessedThroughProperty("Label15")]
		private Label _Label15;

		[AccessedThroughProperty("Button15")]
		private Button _Button15;

		[AccessedThroughProperty("Button13")]
		private Button _Button13;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("Label14")]
		private Label _Label14;

		[AccessedThroughProperty("JK监控状态栏")]
		private TabPage _JK监控状态栏;

		[AccessedThroughProperty("JK监控状态")]
		private GroupBox _JK监控状态;

		[AccessedThroughProperty("Button11")]
		private Button _Button11;

		[AccessedThroughProperty("Button14")]
		private Button _Button14;

		[AccessedThroughProperty("Button19")]
		private Button _Button19;

		[AccessedThroughProperty("Button8")]
		private Button _Button8;

		[AccessedThroughProperty("Button9")]
		private Button _Button9;

		[AccessedThroughProperty("Button12")]
		private Button _Button12;

		[AccessedThroughProperty("DL登录游戏栏")]
		private TabPage _DL登录游戏栏;

		[AccessedThroughProperty("YX游戏登录")]
		private GroupBox _YX游戏登录;

		[AccessedThroughProperty("GroupBox4")]
		private GroupBox _GroupBox4;

		[AccessedThroughProperty("GroupBox8")]
		private GroupBox _GroupBox8;

		[AccessedThroughProperty("checkb6")]
		private CheckBox _checkb6;

		[AccessedThroughProperty("checkb12")]
		private CheckBox _checkb12;

		[AccessedThroughProperty("checkb11")]
		private CheckBox _checkb11;

		[AccessedThroughProperty("checkb10")]
		private CheckBox _checkb10;

		[AccessedThroughProperty("checkb5")]
		private CheckBox _checkb5;

		[AccessedThroughProperty("checkb3")]
		private CheckBox _checkb3;

		[AccessedThroughProperty("checkb9")]
		private CheckBox _checkb9;

		[AccessedThroughProperty("checkb2")]
		private CheckBox _checkb2;

		[AccessedThroughProperty("checkb8")]
		private CheckBox _checkb8;

		[AccessedThroughProperty("checkb1")]
		private CheckBox _checkb1;

		[AccessedThroughProperty("checkb7")]
		private CheckBox _checkb7;

		[AccessedThroughProperty("checkb4")]
		private CheckBox _checkb4;

		[AccessedThroughProperty("Button5")]
		private Button _Button5;

		[AccessedThroughProperty("CheckBox2")]
		private CheckBox _CheckBox2;

		[AccessedThroughProperty("CheckBox1")]
		private CheckBox _CheckBox1;

		[AccessedThroughProperty("Button4")]
		private Button _Button4;

		[AccessedThroughProperty("gl账号管理list")]
		private CheckedListBox _gl账号管理list;

		[AccessedThroughProperty("GroupBox3")]
		private GroupBox _GroupBox3;

		[AccessedThroughProperty("Button10")]
		private Button _Button10;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("js角色Text")]
		private TextBox _js角色Text;

		[AccessedThroughProperty("Label7")]
		private Label _Label7;

		[AccessedThroughProperty("jb脚本Text")]
		private TextBox _jb脚本Text;

		[AccessedThroughProperty("Label6")]
		private Label _Label6;

		[AccessedThroughProperty("pz配置Text")]
		private TextBox _pz配置Text;

		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		[AccessedThroughProperty("mm密码Text")]
		private TextBox _mm密码Text;

		[AccessedThroughProperty("zh账号Text")]
		private TextBox _zh账号Text;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("GroupBox5")]
		private GroupBox _GroupBox5;

		[AccessedThroughProperty("yx游戏Text")]
		private TextBox _yx游戏Text;

		[AccessedThroughProperty("Label12")]
		private Label _Label12;

		[AccessedThroughProperty("wg外挂Text")]
		private TextBox _wg外挂Text;

		[AccessedThroughProperty("Label11")]
		private Label _Label11;

		[AccessedThroughProperty("lj路径Text")]
		private TextBox _lj路径Text;

		[AccessedThroughProperty("Label20")]
		private Label _Label20;

		[AccessedThroughProperty("Button7")]
		private Button _Button7;

		[AccessedThroughProperty("Button6")]
		private Button _Button6;

		[AccessedThroughProperty("TabControl2")]
		private TabControl _TabControl2;

		[AccessedThroughProperty("ComboBox3")]
		private ComboBox _ComboBox3;

		[AccessedThroughProperty("Label8")]
		private Label _Label8;

		[AccessedThroughProperty("ComboBox2")]
		private ComboBox _ComboBox2;

		[AccessedThroughProperty("Label9")]
		private Label _Label9;

		[AccessedThroughProperty("ComboBox1")]
		private ComboBox _ComboBox1;

		[AccessedThroughProperty("Label10")]
		private Label _Label10;

		[AccessedThroughProperty("checkb13")]
		private CheckBox _checkb13;

		[AccessedThroughProperty("checkb14")]
		private CheckBox _checkb14;

		[AccessedThroughProperty("ComboBox4")]
		private ComboBox _ComboBox4;

		[AccessedThroughProperty("Label5")]
		private Label _Label5;

		[AccessedThroughProperty("CheckBox3")]
		private CheckBox _CheckBox3;

		[AccessedThroughProperty("Label21")]
		private Label _Label21;

		[AccessedThroughProperty("Timer1")]
		private System.Windows.Forms.Timer _Timer1;

		[AccessedThroughProperty("XiTong")]
		private ContextMenuStrip _XiTong;

		[AccessedThroughProperty("托盘显示界面")]
		private ToolStripMenuItem _托盘显示界面;

		[AccessedThroughProperty("托盘隐藏界面")]
		private ToolStripMenuItem _托盘隐藏界面;

		[AccessedThroughProperty("ToolStripSeparator9")]
		private ToolStripSeparator _ToolStripSeparator9;

		[AccessedThroughProperty("托盘关于梦幻执事")]
		private ToolStripMenuItem _托盘关于梦幻执事;

		[AccessedThroughProperty("托盘反馈")]
		private ToolStripMenuItem _托盘反馈;

		[AccessedThroughProperty("ToolStripSeparator10")]
		private ToolStripSeparator _ToolStripSeparator10;

		[AccessedThroughProperty("托盘退出")]
		private ToolStripMenuItem _托盘退出;

		[AccessedThroughProperty("NotifyIcon1")]
		private NotifyIcon _NotifyIcon1;

		[AccessedThroughProperty("Button17")]
		private Button _Button17;

		[AccessedThroughProperty("CheckBox4")]
		private CheckBox _CheckBox4;

		[AccessedThroughProperty("rz认证text")]
		private TextBox _rz认证text;

		[AccessedThroughProperty("Button18")]
		private Button _Button18;

		public const int WM_HOTKEY = 786;

		private const int KEYEVENTF_KEYUP = 2;

		public const int WM_SETTEXT = 12;

		public const int BM_CLICK = 245;

		public const int WM_KEYDOWN = 256;

		public const int WM_KEYUP = 257;

		public const int WM_CLOSE = 16;

		public const int WM_QUIT = 18;

		private const int WM_SYSCOMMAND = 274;

		private const long SC_CLOSE = 61536L;

		private const int GW_CHILD = 5;

		private const int GW_HWNDNEXT = 2;

		private ZH主函数 CongDLL;

		private HS函数 HS函数集;

		public ListViewDoubleBuffered jk监控list;

		public float JS加速;

		public string WG外挂名称;

		public string YX游戏名称;

		public int Dq当前异常账号;

		public bool DJ倒计时中;

		public bool JK监控打开;

		public byte cq重启错误次数;

		internal virtual GroupBox GroupBox6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox6 = value;
			}
		}

		internal virtual RichTextBox RichTextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RichTextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RichTextBox1 = value;
			}
		}

		internal virtual Button Button16
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button16;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button16_Click);
				bool flag = this._Button16 != null;
				if (flag)
				{
					this._Button16.Click -= value2;
				}
				this._Button16 = value;
				flag = (this._Button16 != null);
				if (flag)
				{
					this._Button16.Click += value2;
				}
			}
		}

		internal virtual GroupBox GroupBox7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox7 = value;
			}
		}

		internal virtual ListBox rw人物list
		{
			[DebuggerNonUserCode]
			get
			{
				return this._rw人物list;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._rw人物list = value;
			}
		}

		internal virtual ListBox fj副机list
		{
			[DebuggerNonUserCode]
			get
			{
				return this._fj副机list;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._fj副机list = value;
			}
		}

		internal virtual ListBox zj主机list
		{
			[DebuggerNonUserCode]
			get
			{
				return this._zj主机list;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._zj主机list = value;
			}
		}

		internal virtual ListBox jk监控账号list
		{
			[DebuggerNonUserCode]
			get
			{
				return this._jk监控账号list;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._jk监控账号list = value;
			}
		}

		internal virtual ListBox jb句柄list
		{
			[DebuggerNonUserCode]
			get
			{
				return this._jb句柄list;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._jb句柄list = value;
			}
		}

		internal virtual ListBox js角色list
		{
			[DebuggerNonUserCode]
			get
			{
				return this._js角色list;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._js角色list = value;
			}
		}

		internal virtual ListBox jb脚本list
		{
			[DebuggerNonUserCode]
			get
			{
				return this._jb脚本list;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._jb脚本list = value;
			}
		}

		internal virtual ListBox pz配置list
		{
			[DebuggerNonUserCode]
			get
			{
				return this._pz配置list;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._pz配置list = value;
			}
		}

		internal virtual ListBox mm密码list
		{
			[DebuggerNonUserCode]
			get
			{
				return this._mm密码list;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._mm密码list = value;
			}
		}

		internal virtual ListBox zh账号list
		{
			[DebuggerNonUserCode]
			get
			{
				return this._zh账号list;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._zh账号list = value;
			}
		}

		internal virtual TabPage BB版本信息栏
		{
			[DebuggerNonUserCode]
			get
			{
				return this._BB版本信息栏;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._BB版本信息栏 = value;
			}
		}

		internal virtual GroupBox GroupBox16
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox16;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox16 = value;
			}
		}

		internal virtual Label Label19
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label19;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label19 = value;
			}
		}

		internal virtual Label Label13
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label13;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label13 = value;
			}
		}

		internal virtual Label Label18
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label18;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label18 = value;
			}
		}

		internal virtual Label Label17
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label17;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label17 = value;
			}
		}

		internal virtual Label Label16
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label16;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label16 = value;
			}
		}

		internal virtual Label Label15
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label15;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label15 = value;
			}
		}

		internal virtual Button Button15
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button15;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button15_Click);
				bool flag = this._Button15 != null;
				if (flag)
				{
					this._Button15.Click -= value2;
				}
				this._Button15 = value;
				flag = (this._Button15 != null);
				if (flag)
				{
					this._Button15.Click += value2;
				}
			}
		}

		internal virtual Button Button13
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button13;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button13_Click);
				bool flag = this._Button13 != null;
				if (flag)
				{
					this._Button13.Click -= value2;
				}
				this._Button13 = value;
				flag = (this._Button13 != null);
				if (flag)
				{
					this._Button13.Click += value2;
				}
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual Label Label14
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label14;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label14 = value;
			}
		}

		internal virtual TabPage JK监控状态栏
		{
			[DebuggerNonUserCode]
			get
			{
				return this._JK监控状态栏;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._JK监控状态栏 = value;
			}
		}

		internal virtual GroupBox JK监控状态
		{
			[DebuggerNonUserCode]
			get
			{
				return this._JK监控状态;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._JK监控状态 = value;
			}
		}

		internal virtual Button Button11
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button11;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button11_Click);
				bool flag = this._Button11 != null;
				if (flag)
				{
					this._Button11.Click -= value2;
				}
				this._Button11 = value;
				flag = (this._Button11 != null);
				if (flag)
				{
					this._Button11.Click += value2;
				}
			}
		}

		internal virtual Button Button14
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button14;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button14_Click);
				bool flag = this._Button14 != null;
				if (flag)
				{
					this._Button14.Click -= value2;
				}
				this._Button14 = value;
				flag = (this._Button14 != null);
				if (flag)
				{
					this._Button14.Click += value2;
				}
			}
		}

		internal virtual Button Button19
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button19;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button19_Click);
				bool flag = this._Button19 != null;
				if (flag)
				{
					this._Button19.Click -= value2;
				}
				this._Button19 = value;
				flag = (this._Button19 != null);
				if (flag)
				{
					this._Button19.Click += value2;
				}
			}
		}

		internal virtual Button Button8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button8_Click);
				bool flag = this._Button8 != null;
				if (flag)
				{
					this._Button8.Click -= value2;
				}
				this._Button8 = value;
				flag = (this._Button8 != null);
				if (flag)
				{
					this._Button8.Click += value2;
				}
			}
		}

		internal virtual Button Button9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button9_Click);
				bool flag = this._Button9 != null;
				if (flag)
				{
					this._Button9.Click -= value2;
				}
				this._Button9 = value;
				flag = (this._Button9 != null);
				if (flag)
				{
					this._Button9.Click += value2;
				}
			}
		}

		internal virtual Button Button12
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button12;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button12_Click);
				bool flag = this._Button12 != null;
				if (flag)
				{
					this._Button12.Click -= value2;
				}
				this._Button12 = value;
				flag = (this._Button12 != null);
				if (flag)
				{
					this._Button12.Click += value2;
				}
			}
		}

		internal virtual TabPage DL登录游戏栏
		{
			[DebuggerNonUserCode]
			get
			{
				return this._DL登录游戏栏;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._DL登录游戏栏 = value;
			}
		}

		internal virtual GroupBox YX游戏登录
		{
			[DebuggerNonUserCode]
			get
			{
				return this._YX游戏登录;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._YX游戏登录 = value;
			}
		}

		internal virtual GroupBox GroupBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox4 = value;
			}
		}

		internal virtual GroupBox GroupBox8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox8 = value;
			}
		}

		internal virtual CheckBox checkb6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb6 = value;
			}
		}

		internal virtual CheckBox checkb12
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb12;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb12 = value;
			}
		}

		internal virtual CheckBox checkb11
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb11;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb11 = value;
			}
		}

		internal virtual CheckBox checkb10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb10 = value;
			}
		}

		internal virtual CheckBox checkb5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb5 = value;
			}
		}

		internal virtual CheckBox checkb3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb3 = value;
			}
		}

		internal virtual CheckBox checkb9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb9 = value;
			}
		}

		internal virtual CheckBox checkb2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb2 = value;
			}
		}

		internal virtual CheckBox checkb8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb8 = value;
			}
		}

		internal virtual CheckBox checkb1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb1 = value;
			}
		}

		internal virtual CheckBox checkb7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb7 = value;
			}
		}

		internal virtual CheckBox checkb4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb4 = value;
			}
		}

		internal virtual Button Button5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button5_Click);
				bool flag = this._Button5 != null;
				if (flag)
				{
					this._Button5.Click -= value2;
				}
				this._Button5 = value;
				flag = (this._Button5 != null);
				if (flag)
				{
					this._Button5.Click += value2;
				}
			}
		}

		internal virtual CheckBox CheckBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CheckBox2_CheckedChanged);
				bool flag = this._CheckBox2 != null;
				if (flag)
				{
					this._CheckBox2.CheckedChanged -= value2;
				}
				this._CheckBox2 = value;
				flag = (this._CheckBox2 != null);
				if (flag)
				{
					this._CheckBox2.CheckedChanged += value2;
				}
			}
		}

		internal virtual CheckBox CheckBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CheckBox1_CheckedChanged);
				bool flag = this._CheckBox1 != null;
				if (flag)
				{
					this._CheckBox1.CheckedChanged -= value2;
				}
				this._CheckBox1 = value;
				flag = (this._CheckBox1 != null);
				if (flag)
				{
					this._CheckBox1.CheckedChanged += value2;
				}
			}
		}

		internal virtual Button Button4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button4_Click);
				bool flag = this._Button4 != null;
				if (flag)
				{
					this._Button4.Click -= value2;
				}
				this._Button4 = value;
				flag = (this._Button4 != null);
				if (flag)
				{
					this._Button4.Click += value2;
				}
			}
		}

		internal virtual CheckedListBox gl账号管理list
		{
			[DebuggerNonUserCode]
			get
			{
				return this._gl账号管理list;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.gl账号管理list_Click);
				bool flag = this._gl账号管理list != null;
				if (flag)
				{
					this._gl账号管理list.Click -= value2;
				}
				this._gl账号管理list = value;
				flag = (this._gl账号管理list != null);
				if (flag)
				{
					this._gl账号管理list.Click += value2;
				}
			}
		}

		internal virtual GroupBox GroupBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox3 = value;
			}
		}

		internal virtual Button Button10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button10_Click);
				bool flag = this._Button10 != null;
				if (flag)
				{
					this._Button10.Click -= value2;
				}
				this._Button10 = value;
				flag = (this._Button10 != null);
				if (flag)
				{
					this._Button10.Click += value2;
				}
			}
		}

		internal virtual Button Button3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button3_Click);
				bool flag = this._Button3 != null;
				if (flag)
				{
					this._Button3.Click -= value2;
				}
				this._Button3 = value;
				flag = (this._Button3 != null);
				if (flag)
				{
					this._Button3.Click += value2;
				}
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual TextBox js角色Text
		{
			[DebuggerNonUserCode]
			get
			{
				return this._js角色Text;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._js角色Text = value;
			}
		}

		internal virtual Label Label7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label7 = value;
			}
		}

		internal virtual TextBox jb脚本Text
		{
			[DebuggerNonUserCode]
			get
			{
				return this._jb脚本Text;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.jb脚本Text_TextChanged);
				bool flag = this._jb脚本Text != null;
				if (flag)
				{
					this._jb脚本Text.TextChanged -= value2;
				}
				this._jb脚本Text = value;
				flag = (this._jb脚本Text != null);
				if (flag)
				{
					this._jb脚本Text.TextChanged += value2;
				}
			}
		}

		internal virtual Label Label6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label6 = value;
			}
		}

		internal virtual TextBox pz配置Text
		{
			[DebuggerNonUserCode]
			get
			{
				return this._pz配置Text;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.pz配置Text_TextChanged);
				bool flag = this._pz配置Text != null;
				if (flag)
				{
					this._pz配置Text.TextChanged -= value2;
				}
				this._pz配置Text = value;
				flag = (this._pz配置Text != null);
				if (flag)
				{
					this._pz配置Text.TextChanged += value2;
				}
			}
		}

		internal virtual Label Label4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label4 = value;
			}
		}

		internal virtual TextBox mm密码Text
		{
			[DebuggerNonUserCode]
			get
			{
				return this._mm密码Text;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._mm密码Text = value;
			}
		}

		internal virtual TextBox zh账号Text
		{
			[DebuggerNonUserCode]
			get
			{
				return this._zh账号Text;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._zh账号Text = value;
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		internal virtual GroupBox GroupBox5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox5 = value;
			}
		}

		internal virtual TextBox yx游戏Text
		{
			[DebuggerNonUserCode]
			get
			{
				return this._yx游戏Text;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._yx游戏Text = value;
			}
		}

		internal virtual Label Label12
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label12;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label12 = value;
			}
		}

		internal virtual TextBox wg外挂Text
		{
			[DebuggerNonUserCode]
			get
			{
				return this._wg外挂Text;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._wg外挂Text = value;
			}
		}

		internal virtual Label Label11
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label11;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label11 = value;
			}
		}

		internal virtual TextBox lj路径Text
		{
			[DebuggerNonUserCode]
			get
			{
				return this._lj路径Text;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lj路径Text = value;
			}
		}

		internal virtual Label Label20
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label20;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label20 = value;
			}
		}

		internal virtual Button Button7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button7_Click);
				bool flag = this._Button7 != null;
				if (flag)
				{
					this._Button7.Click -= value2;
				}
				this._Button7 = value;
				flag = (this._Button7 != null);
				if (flag)
				{
					this._Button7.Click += value2;
				}
			}
		}

		internal virtual Button Button6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button6_Click);
				bool flag = this._Button6 != null;
				if (flag)
				{
					this._Button6.Click -= value2;
				}
				this._Button6 = value;
				flag = (this._Button6 != null);
				if (flag)
				{
					this._Button6.Click += value2;
				}
			}
		}

		internal virtual TabControl TabControl2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabControl2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabControl2 = value;
			}
		}

		internal virtual ComboBox ComboBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox3 = value;
			}
		}

		internal virtual Label Label8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label8 = value;
			}
		}

		internal virtual ComboBox ComboBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox2 = value;
			}
		}

		internal virtual Label Label9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label9 = value;
			}
		}

		internal virtual ComboBox ComboBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox1 = value;
			}
		}

		internal virtual Label Label10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label10 = value;
			}
		}

		internal virtual CheckBox checkb13
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb13;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb13 = value;
			}
		}

		internal virtual CheckBox checkb14
		{
			[DebuggerNonUserCode]
			get
			{
				return this._checkb14;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._checkb14 = value;
			}
		}

		internal virtual ComboBox ComboBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox4 = value;
			}
		}

		internal virtual Label Label5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label5 = value;
			}
		}

		internal virtual CheckBox CheckBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox3 = value;
			}
		}

		internal virtual Label Label21
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label21;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label21 = value;
			}
		}

		internal virtual System.Windows.Forms.Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual ContextMenuStrip XiTong
		{
			[DebuggerNonUserCode]
			get
			{
				return this._XiTong;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._XiTong = value;
			}
		}

		internal virtual ToolStripMenuItem 托盘显示界面
		{
			[DebuggerNonUserCode]
			get
			{
				return this._托盘显示界面;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.托盘显示界面_Click);
				bool flag = this._托盘显示界面 != null;
				if (flag)
				{
					this._托盘显示界面.Click -= value2;
				}
				this._托盘显示界面 = value;
				flag = (this._托盘显示界面 != null);
				if (flag)
				{
					this._托盘显示界面.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem 托盘隐藏界面
		{
			[DebuggerNonUserCode]
			get
			{
				return this._托盘隐藏界面;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.托盘隐藏界面_Click);
				bool flag = this._托盘隐藏界面 != null;
				if (flag)
				{
					this._托盘隐藏界面.Click -= value2;
				}
				this._托盘隐藏界面 = value;
				flag = (this._托盘隐藏界面 != null);
				if (flag)
				{
					this._托盘隐藏界面.Click += value2;
				}
			}
		}

		internal virtual ToolStripSeparator ToolStripSeparator9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripSeparator9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripSeparator9 = value;
			}
		}

		internal virtual ToolStripMenuItem 托盘关于梦幻执事
		{
			[DebuggerNonUserCode]
			get
			{
				return this._托盘关于梦幻执事;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.托盘关于梦幻执事_Click);
				bool flag = this._托盘关于梦幻执事 != null;
				if (flag)
				{
					this._托盘关于梦幻执事.Click -= value2;
				}
				this._托盘关于梦幻执事 = value;
				flag = (this._托盘关于梦幻执事 != null);
				if (flag)
				{
					this._托盘关于梦幻执事.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem 托盘反馈
		{
			[DebuggerNonUserCode]
			get
			{
				return this._托盘反馈;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.托盘反馈_Click);
				bool flag = this._托盘反馈 != null;
				if (flag)
				{
					this._托盘反馈.Click -= value2;
				}
				this._托盘反馈 = value;
				flag = (this._托盘反馈 != null);
				if (flag)
				{
					this._托盘反馈.Click += value2;
				}
			}
		}

		internal virtual ToolStripSeparator ToolStripSeparator10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripSeparator10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripSeparator10 = value;
			}
		}

		internal virtual ToolStripMenuItem 托盘退出
		{
			[DebuggerNonUserCode]
			get
			{
				return this._托盘退出;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.托盘退出_Click);
				bool flag = this._托盘退出 != null;
				if (flag)
				{
					this._托盘退出.Click -= value2;
				}
				this._托盘退出 = value;
				flag = (this._托盘退出 != null);
				if (flag)
				{
					this._托盘退出.Click += value2;
				}
			}
		}

		internal virtual NotifyIcon NotifyIcon1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NotifyIcon1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				MouseEventHandler value2 = new MouseEventHandler(this.NotifyIcon1_MouseDown);
				bool flag = this._NotifyIcon1 != null;
				if (flag)
				{
					this._NotifyIcon1.MouseDown -= value2;
				}
				this._NotifyIcon1 = value;
				flag = (this._NotifyIcon1 != null);
				if (flag)
				{
					this._NotifyIcon1.MouseDown += value2;
				}
			}
		}

		internal virtual Button Button17
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button17;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button17_Click);
				bool flag = this._Button17 != null;
				if (flag)
				{
					this._Button17.Click -= value2;
				}
				this._Button17 = value;
				flag = (this._Button17 != null);
				if (flag)
				{
					this._Button17.Click += value2;
				}
			}
		}

		internal virtual CheckBox CheckBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox4 = value;
			}
		}

		internal virtual TextBox rz认证text
		{
			[DebuggerNonUserCode]
			get
			{
				return this._rz认证text;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._rz认证text = value;
			}
		}

		internal virtual Button Button18
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button18;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button18_Click);
				bool flag = this._Button18 != null;
				if (flag)
				{
					this._Button18.Click -= value2;
				}
				this._Button18 = value;
				flag = (this._Button18 != null);
				if (flag)
				{
					this._Button18.Click += value2;
				}
			}
		}

		public ZJ主界面()
		{
			base.FormClosing += new FormClosingEventHandler(this.ZJ主界面_FormClosing);
			base.Load += new EventHandler(this.ZJ主界面_Load);
			base.FontChanged += new EventHandler(this.ZJ主界面_FontChanged);
			ZJ主界面.__ENCAddToList(this);
			this.CongDLL = new ZH主函数Class();
			this.HS函数集 = new HS函数();
			this.jk监控list = new ListViewDoubleBuffered();
			this.JS加速 = 2f;
			this.DJ倒计时中 = false;
			this.JK监控打开 = false;
			this.cq重启错误次数 = 0;
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = ZJ主界面.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = ZJ主界面.__ENCList.Count == ZJ主界面.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = ZJ主界面.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = ZJ主界面.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									ZJ主界面.__ENCList[num] = ZJ主界面.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						ZJ主界面.__ENCList.RemoveRange(num, ZJ主界面.__ENCList.Count - num);
						ZJ主界面.__ENCList.Capacity = ZJ主界面.__ENCList.Count;
					}
					ZJ主界面.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(ZJ主界面));
			this.GroupBox6 = new GroupBox();
			this.RichTextBox1 = new RichTextBox();
			this.Button16 = new Button();
			this.GroupBox7 = new GroupBox();
			this.rw人物list = new ListBox();
			this.fj副机list = new ListBox();
			this.zj主机list = new ListBox();
			this.jk监控账号list = new ListBox();
			this.jb句柄list = new ListBox();
			this.js角色list = new ListBox();
			this.jb脚本list = new ListBox();
			this.pz配置list = new ListBox();
			this.mm密码list = new ListBox();
			this.zh账号list = new ListBox();
			this.BB版本信息栏 = new TabPage();
			this.GroupBox16 = new GroupBox();
			this.Label19 = new Label();
			this.Label13 = new Label();
			this.Label18 = new Label();
			this.Label17 = new Label();
			this.Label16 = new Label();
			this.Label15 = new Label();
			this.Button15 = new Button();
			this.Button13 = new Button();
			this.Label1 = new Label();
			this.Label14 = new Label();
			this.JK监控状态栏 = new TabPage();
			this.JK监控状态 = new GroupBox();
			this.Button17 = new Button();
			this.Button11 = new Button();
			this.Button14 = new Button();
			this.Button19 = new Button();
			this.Button8 = new Button();
			this.Button9 = new Button();
			this.Button12 = new Button();
			this.DL登录游戏栏 = new TabPage();
			this.YX游戏登录 = new GroupBox();
			this.GroupBox4 = new GroupBox();
			this.Button4 = new Button();
			this.GroupBox8 = new GroupBox();
			this.ComboBox4 = new ComboBox();
			this.Label5 = new Label();
			this.CheckBox3 = new CheckBox();
			this.checkb13 = new CheckBox();
			this.checkb14 = new CheckBox();
			this.checkb6 = new CheckBox();
			this.checkb5 = new CheckBox();
			this.checkb12 = new CheckBox();
			this.checkb11 = new CheckBox();
			this.checkb10 = new CheckBox();
			this.checkb3 = new CheckBox();
			this.checkb9 = new CheckBox();
			this.checkb2 = new CheckBox();
			this.checkb8 = new CheckBox();
			this.checkb1 = new CheckBox();
			this.checkb7 = new CheckBox();
			this.checkb4 = new CheckBox();
			this.Button5 = new Button();
			this.CheckBox2 = new CheckBox();
			this.CheckBox1 = new CheckBox();
			this.gl账号管理list = new CheckedListBox();
			this.GroupBox3 = new GroupBox();
			this.ComboBox2 = new ComboBox();
			this.ComboBox3 = new ComboBox();
			this.Label8 = new Label();
			this.Label9 = new Label();
			this.ComboBox1 = new ComboBox();
			this.Label10 = new Label();
			this.Button10 = new Button();
			this.Button3 = new Button();
			this.Button2 = new Button();
			this.Button1 = new Button();
			this.js角色Text = new TextBox();
			this.Label7 = new Label();
			this.jb脚本Text = new TextBox();
			this.Label6 = new Label();
			this.pz配置Text = new TextBox();
			this.Label4 = new Label();
			this.mm密码Text = new TextBox();
			this.zh账号Text = new TextBox();
			this.Label3 = new Label();
			this.Label2 = new Label();
			this.GroupBox5 = new GroupBox();
			this.rz认证text = new TextBox();
			this.CheckBox4 = new CheckBox();
			this.yx游戏Text = new TextBox();
			this.Label12 = new Label();
			this.wg外挂Text = new TextBox();
			this.Label11 = new Label();
			this.lj路径Text = new TextBox();
			this.Label20 = new Label();
			this.Button7 = new Button();
			this.Button6 = new Button();
			this.TabControl2 = new TabControl();
			this.Label21 = new Label();
			this.Timer1 = new System.Windows.Forms.Timer(this.components);
			this.XiTong = new ContextMenuStrip(this.components);
			this.托盘显示界面 = new ToolStripMenuItem();
			this.托盘隐藏界面 = new ToolStripMenuItem();
			this.ToolStripSeparator9 = new ToolStripSeparator();
			this.托盘关于梦幻执事 = new ToolStripMenuItem();
			this.托盘反馈 = new ToolStripMenuItem();
			this.ToolStripSeparator10 = new ToolStripSeparator();
			this.托盘退出 = new ToolStripMenuItem();
			this.NotifyIcon1 = new NotifyIcon(this.components);
			this.Button18 = new Button();
			this.GroupBox6.SuspendLayout();
			this.GroupBox7.SuspendLayout();
			this.BB版本信息栏.SuspendLayout();
			this.GroupBox16.SuspendLayout();
			this.JK监控状态栏.SuspendLayout();
			this.JK监控状态.SuspendLayout();
			this.DL登录游戏栏.SuspendLayout();
			this.YX游戏登录.SuspendLayout();
			this.GroupBox4.SuspendLayout();
			this.GroupBox8.SuspendLayout();
			this.GroupBox3.SuspendLayout();
			this.GroupBox5.SuspendLayout();
			this.TabControl2.SuspendLayout();
			this.XiTong.SuspendLayout();
			this.SuspendLayout();
			this.GroupBox6.Controls.Add(this.RichTextBox1);
			Control arg_601_0 = this.GroupBox6;
			Point location = new Point(5, 339);
			arg_601_0.Location = location;
			this.GroupBox6.Name = "GroupBox6";
			Control arg_632_0 = this.GroupBox6;
			Size size = new Size(598, 176);
			arg_632_0.Size = size;
			this.GroupBox6.TabIndex = 22;
			this.GroupBox6.TabStop = false;
			this.GroupBox6.Text = "日志";
			this.RichTextBox1.BackColor = Color.FromArgb(30, 30, 30);
			this.RichTextBox1.BorderStyle = BorderStyle.FixedSingle;
			this.RichTextBox1.ForeColor = Color.FromArgb(255, 100, 10);
			Control arg_6B4_0 = this.RichTextBox1;
			location = new Point(6, 15);
			arg_6B4_0.Location = location;
			this.RichTextBox1.Name = "RichTextBox1";
			this.RichTextBox1.ReadOnly = true;
			Control arg_6F2_0 = this.RichTextBox1;
			size = new Size(586, 155);
			arg_6F2_0.Size = size;
			this.RichTextBox1.TabIndex = 1;
			this.RichTextBox1.Text = "";
			Control arg_72C_0 = this.Button16;
			location = new Point(620, 24);
			arg_72C_0.Location = location;
			this.Button16.Name = "Button16";
			Control arg_757_0 = this.Button16;
			size = new Size(90, 35);
			arg_757_0.Size = size;
			this.Button16.TabIndex = 24;
			this.Button16.Text = "Button16";
			this.Button16.UseVisualStyleBackColor = true;
			this.GroupBox7.Controls.Add(this.rw人物list);
			this.GroupBox7.Controls.Add(this.fj副机list);
			this.GroupBox7.Controls.Add(this.zj主机list);
			this.GroupBox7.Controls.Add(this.jk监控账号list);
			this.GroupBox7.Controls.Add(this.jb句柄list);
			this.GroupBox7.Controls.Add(this.js角色list);
			this.GroupBox7.Controls.Add(this.jb脚本list);
			this.GroupBox7.Controls.Add(this.pz配置list);
			this.GroupBox7.Controls.Add(this.mm密码list);
			this.GroupBox7.Controls.Add(this.zh账号list);
			Control arg_885_0 = this.GroupBox7;
			location = new Point(964, 15);
			arg_885_0.Location = location;
			this.GroupBox7.Name = "GroupBox7";
			Control arg_8B6_0 = this.GroupBox7;
			size = new Size(597, 156);
			arg_8B6_0.Size = size;
			this.GroupBox7.TabIndex = 25;
			this.GroupBox7.TabStop = false;
			this.GroupBox7.Text = "     账号            密码            密锁            脚本            角色            句柄";
			this.rw人物list.FormattingEnabled = true;
			this.rw人物list.ItemHeight = 12;
			Control arg_919_0 = this.rw人物list;
			location = new Point(203, 90);
			arg_919_0.Location = location;
			this.rw人物list.Name = "rw人物list";
			Control arg_944_0 = this.rw人物list;
			size = new Size(92, 64);
			arg_944_0.Size = size;
			this.rw人物list.TabIndex = 15;
			this.fj副机list.FormattingEnabled = true;
			this.fj副机list.ItemHeight = 12;
			Control arg_986_0 = this.fj副机list;
			location = new Point(105, 90);
			arg_986_0.Location = location;
			this.fj副机list.Name = "fj副机list";
			Control arg_9B1_0 = this.fj副机list;
			size = new Size(92, 64);
			arg_9B1_0.Size = size;
			this.fj副机list.TabIndex = 14;
			this.zj主机list.FormattingEnabled = true;
			this.zj主机list.ItemHeight = 12;
			Control arg_9F2_0 = this.zj主机list;
			location = new Point(7, 90);
			arg_9F2_0.Location = location;
			this.zj主机list.Name = "zj主机list";
			Control arg_A1D_0 = this.zj主机list;
			size = new Size(92, 64);
			arg_A1D_0.Size = size;
			this.zj主机list.TabIndex = 13;
			this.jk监控账号list.FormattingEnabled = true;
			this.jk监控账号list.ItemHeight = 12;
			Control arg_A62_0 = this.jk监控账号list;
			location = new Point(499, 90);
			arg_A62_0.Location = location;
			this.jk监控账号list.Name = "jk监控账号list";
			Control arg_A8D_0 = this.jk监控账号list;
			size = new Size(92, 64);
			arg_A8D_0.Size = size;
			this.jk监控账号list.TabIndex = 12;
			this.jb句柄list.FormattingEnabled = true;
			this.jb句柄list.ItemHeight = 12;
			Control arg_AD2_0 = this.jb句柄list;
			location = new Point(497, 20);
			arg_AD2_0.Location = location;
			this.jb句柄list.Name = "jb句柄list";
			Control arg_AFD_0 = this.jb句柄list;
			size = new Size(92, 64);
			arg_AFD_0.Size = size;
			this.jb句柄list.TabIndex = 11;
			this.js角色list.FormattingEnabled = true;
			this.js角色list.ItemHeight = 12;
			Control arg_B42_0 = this.js角色list;
			location = new Point(399, 20);
			arg_B42_0.Location = location;
			this.js角色list.Name = "js角色list";
			Control arg_B6D_0 = this.js角色list;
			size = new Size(92, 64);
			arg_B6D_0.Size = size;
			this.js角色list.TabIndex = 10;
			this.jb脚本list.FormattingEnabled = true;
			this.jb脚本list.ItemHeight = 12;
			Control arg_BB2_0 = this.jb脚本list;
			location = new Point(301, 20);
			arg_BB2_0.Location = location;
			this.jb脚本list.Name = "jb脚本list";
			Control arg_BDD_0 = this.jb脚本list;
			size = new Size(92, 64);
			arg_BDD_0.Size = size;
			this.jb脚本list.TabIndex = 9;
			this.pz配置list.FormattingEnabled = true;
			this.pz配置list.ItemHeight = 12;
			Control arg_C22_0 = this.pz配置list;
			location = new Point(203, 20);
			arg_C22_0.Location = location;
			this.pz配置list.Name = "pz配置list";
			Control arg_C4D_0 = this.pz配置list;
			size = new Size(92, 64);
			arg_C4D_0.Size = size;
			this.pz配置list.TabIndex = 8;
			this.mm密码list.FormattingEnabled = true;
			this.mm密码list.ItemHeight = 12;
			Control arg_C8E_0 = this.mm密码list;
			location = new Point(104, 20);
			arg_C8E_0.Location = location;
			this.mm密码list.Name = "mm密码list";
			Control arg_CB9_0 = this.mm密码list;
			size = new Size(92, 64);
			arg_CB9_0.Size = size;
			this.mm密码list.TabIndex = 6;
			this.zh账号list.FormattingEnabled = true;
			this.zh账号list.ItemHeight = 12;
			Control arg_CF9_0 = this.zh账号list;
			location = new Point(6, 20);
			arg_CF9_0.Location = location;
			this.zh账号list.Name = "zh账号list";
			Control arg_D24_0 = this.zh账号list;
			size = new Size(92, 64);
			arg_D24_0.Size = size;
			this.zh账号list.TabIndex = 5;
			this.BB版本信息栏.BackColor = SystemColors.Control;
			this.BB版本信息栏.Controls.Add(this.GroupBox16);
			TabPage arg_D71_0 = this.BB版本信息栏;
			location = new Point(4, 22);
			arg_D71_0.Location = location;
			this.BB版本信息栏.Name = "BB版本信息栏";
			Control arg_DA2_0 = this.BB版本信息栏;
			size = new Size(591, 308);
			arg_DA2_0.Size = size;
			this.BB版本信息栏.TabIndex = 3;
			this.BB版本信息栏.Text = "  版本信息  ";
			this.GroupBox16.Controls.Add(this.Label19);
			this.GroupBox16.Controls.Add(this.Label13);
			this.GroupBox16.Controls.Add(this.Label18);
			this.GroupBox16.Controls.Add(this.Label17);
			this.GroupBox16.Controls.Add(this.Label16);
			this.GroupBox16.Controls.Add(this.Label15);
			this.GroupBox16.Controls.Add(this.Button15);
			this.GroupBox16.Controls.Add(this.Button13);
			this.GroupBox16.Controls.Add(this.Label1);
			this.GroupBox16.Controls.Add(this.Label14);
			Control arg_EBE_0 = this.GroupBox16;
			location = new Point(3, 10);
			arg_EBE_0.Location = location;
			this.GroupBox16.Name = "GroupBox16";
			Control arg_EEF_0 = this.GroupBox16;
			size = new Size(585, 291);
			arg_EEF_0.Size = size;
			this.GroupBox16.TabIndex = 22;
			this.GroupBox16.TabStop = false;
			this.GroupBox16.Text = "当前版本为(标准版)";
			this.Label19.AutoSize = true;
			Control arg_F44_0 = this.Label19;
			location = new Point(23, 208);
			arg_F44_0.Location = location;
			this.Label19.Name = "Label19";
			Control arg_F72_0 = this.Label19;
			size = new Size(179, 12);
			arg_F72_0.Size = size;
			this.Label19.TabIndex = 34;
			this.Label19.Text = "调试：|巅峰灬520  QQ：4419479";
			this.Label13.AutoSize = true;
			this.Label13.ForeColor = Color.FromArgb(255, 100, 10);
			Control arg_FD7_0 = this.Label13;
			location = new Point(340, 149);
			arg_FD7_0.Location = location;
			this.Label13.Name = "Label13";
			Control arg_1002_0 = this.Label13;
			size = new Size(107, 12);
			arg_1002_0.Size = size;
			this.Label13.TabIndex = 33;
			this.Label13.Text = "剩余时间 36500 天";
			this.Label18.AutoSize = true;
			Control arg_1047_0 = this.Label18;
			location = new Point(23, 107);
			arg_1047_0.Location = location;
			this.Label18.Name = "Label18";
			Control arg_1075_0 = this.Label18;
			size = new Size(287, 12);
			arg_1075_0.Size = size;
			this.Label18.TabIndex = 32;
			this.Label18.Text = "当前为AS外挂监控，STW外挂监控请到QQ空间日志获取";
			this.Label17.AutoSize = true;
			Control arg_10BD_0 = this.Label17;
			location = new Point(23, 235);
			arg_10BD_0.Location = location;
			this.Label17.Name = "Label17";
			Control arg_10EB_0 = this.Label17;
			size = new Size(185, 12);
			arg_10EB_0.Size = size;
			this.Label17.TabIndex = 31;
			this.Label17.Text = "开发：前尘の忆梦  QQ：27485203";
			this.Label16.AutoSize = true;
			Control arg_1130_0 = this.Label16;
			location = new Point(23, 73);
			arg_1130_0.Location = location;
			this.Label16.Name = "Label16";
			Control arg_115E_0 = this.Label16;
			size = new Size(245, 12);
			arg_115E_0.Size = size;
			this.Label16.TabIndex = 30;
			this.Label16.Text = "识别验证码、删除游戏人物等功能可私人定制";
			this.Label15.AutoSize = true;
			Control arg_11A3_0 = this.Label15;
			location = new Point(23, 43);
			arg_11A3_0.Location = location;
			this.Label15.Name = "Label15";
			Control arg_11D1_0 = this.Label15;
			size = new Size(533, 12);
			arg_11D1_0.Size = size;
			this.Label15.TabIndex = 29;
			this.Label15.Text = "标准版（一键批量登录账号，登录后自动寻找脚本启动脚本，自动处理检测死挂、卡挂后重新登录）";
			Control arg_120F_0 = this.Button15;
			location = new Point(461, 220);
			arg_120F_0.Location = location;
			this.Button15.Name = "Button15";
			Control arg_123A_0 = this.Button15;
			size = new Size(99, 27);
			arg_123A_0.Size = size;
			this.Button15.TabIndex = 28;
			this.Button15.Text = "检查最新版本";
			this.Button15.UseVisualStyleBackColor = true;
			this.Button13.BackgroundImageLayout = ImageLayout.None;
			this.Button13.Font = new Font("宋体", 9f, FontStyle.Underline, GraphicsUnit.Point, 134);
			this.Button13.ForeColor = Color.DodgerBlue;
			Control arg_12C5_0 = this.Button13;
			location = new Point(340, 220);
			arg_12C5_0.Location = location;
			this.Button13.Name = "Button13";
			Control arg_12F0_0 = this.Button13;
			size = new Size(99, 27);
			arg_12F0_0.Size = size;
			this.Button13.TabIndex = 27;
			this.Button13.Text = "在线帮助文档";
			this.Button13.UseVisualStyleBackColor = true;
			this.Label1.AutoSize = true;
			Control arg_1348_0 = this.Label1;
			location = new Point(461, 183);
			arg_1348_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_1373_0 = this.Label1;
			size = new Size(83, 12);
			arg_1373_0.Size = size;
			this.Label1.TabIndex = 21;
			this.Label1.Text = "最新版本：---";
			this.Label14.AutoSize = true;
			Control arg_13BE_0 = this.Label14;
			location = new Point(340, 183);
			arg_13BE_0.Location = location;
			this.Label14.Name = "Label14";
			Control arg_13E9_0 = this.Label14;
			size = new Size(65, 12);
			arg_13E9_0.Size = size;
			this.Label14.TabIndex = 20;
			this.Label14.Text = "当前版本：";
			this.JK监控状态栏.BackColor = SystemColors.Control;
			this.JK监控状态栏.Controls.Add(this.JK监控状态);
			TabPage arg_1448_0 = this.JK监控状态栏;
			location = new Point(4, 22);
			arg_1448_0.Location = location;
			this.JK监控状态栏.Name = "JK监控状态栏";
			Control arg_1470_0 = this.JK监控状态栏;
			Padding padding = new Padding(3);
			arg_1470_0.Padding = padding;
			Control arg_1490_0 = this.JK监控状态栏;
			size = new Size(591, 308);
			arg_1490_0.Size = size;
			this.JK监控状态栏.TabIndex = 1;
			this.JK监控状态栏.Text = "  监控状态  ";
			this.JK监控状态.BackColor = SystemColors.Control;
			this.JK监控状态.Controls.Add(this.Button17);
			this.JK监控状态.Controls.Add(this.Button11);
			this.JK监控状态.Controls.Add(this.Button14);
			this.JK监控状态.Controls.Add(this.Button19);
			this.JK监控状态.Controls.Add(this.Button8);
			this.JK监控状态.Controls.Add(this.Button9);
			this.JK监控状态.Controls.Add(this.Button12);
			Control arg_1578_0 = this.JK监控状态;
			location = new Point(5, -3);
			arg_1578_0.Location = location;
			this.JK监控状态.Name = "JK监控状态";
			Control arg_15A9_0 = this.JK监控状态;
			size = new Size(580, 305);
			arg_15A9_0.Size = size;
			this.JK监控状态.TabIndex = 4;
			this.JK监控状态.TabStop = false;
			this.Button17.BackColor = SystemColors.Control;
			Control arg_15F3_0 = this.Button17;
			location = new Point(361, 276);
			arg_15F3_0.Location = location;
			this.Button17.Name = "Button17";
			Control arg_161E_0 = this.Button17;
			size = new Size(65, 22);
			arg_161E_0.Size = size;
			this.Button17.TabIndex = 31;
			this.Button17.Text = "破解脚本";
			this.Button17.UseVisualStyleBackColor = false;
			this.Button11.BackColor = SystemColors.Control;
			Control arg_167A_0 = this.Button11;
			location = new Point(432, 276);
			arg_167A_0.Location = location;
			this.Button11.Name = "Button11";
			Control arg_16A8_0 = this.Button11;
			size = new Size(142, 22);
			arg_16A8_0.Size = size;
			this.Button11.TabIndex = 30;
			this.Button11.Text = "重置监控数据";
			this.Button11.UseVisualStyleBackColor = false;
			this.Button14.BackColor = SystemColors.Control;
			Control arg_1704_0 = this.Button14;
			location = new Point(290, 276);
			arg_1704_0.Location = location;
			this.Button14.Name = "Button14";
			Control arg_172F_0 = this.Button14;
			size = new Size(65, 22);
			arg_172F_0.Size = size;
			this.Button14.TabIndex = 28;
			this.Button14.Text = "隐藏外挂";
			this.Button14.UseVisualStyleBackColor = false;
			this.Button19.BackColor = SystemColors.Control;
			Control arg_178B_0 = this.Button19;
			location = new Point(219, 276);
			arg_178B_0.Location = location;
			this.Button19.Name = "Button19";
			Control arg_17B6_0 = this.Button19;
			size = new Size(65, 22);
			arg_17B6_0.Size = size;
			this.Button19.TabIndex = 27;
			this.Button19.Text = "显示外挂";
			this.Button19.UseVisualStyleBackColor = false;
			this.Button8.BackColor = SystemColors.Control;
			Control arg_180E_0 = this.Button8;
			location = new Point(6, 276);
			arg_180E_0.Location = location;
			this.Button8.Name = "Button8";
			Control arg_1839_0 = this.Button8;
			size = new Size(65, 22);
			arg_1839_0.Size = size;
			this.Button8.TabIndex = 26;
			this.Button8.Text = "关闭外挂";
			this.Button8.UseVisualStyleBackColor = false;
			this.Button9.BackColor = SystemColors.Control;
			Control arg_1892_0 = this.Button9;
			location = new Point(77, 276);
			arg_1892_0.Location = location;
			this.Button9.Name = "Button9";
			Control arg_18BD_0 = this.Button9;
			size = new Size(65, 22);
			arg_18BD_0.Size = size;
			this.Button9.TabIndex = 25;
			this.Button9.Text = "资料显示";
			this.Button9.UseVisualStyleBackColor = false;
			this.Button12.BackColor = SystemColors.Control;
			Control arg_1919_0 = this.Button12;
			location = new Point(148, 276);
			arg_1919_0.Location = location;
			this.Button12.Name = "Button12";
			Control arg_1944_0 = this.Button12;
			size = new Size(65, 22);
			arg_1944_0.Size = size;
			this.Button12.TabIndex = 24;
			this.Button12.Text = "战斗设置";
			this.Button12.UseVisualStyleBackColor = false;
			this.DL登录游戏栏.BackColor = SystemColors.Control;
			this.DL登录游戏栏.Controls.Add(this.YX游戏登录);
			TabPage arg_19B0_0 = this.DL登录游戏栏;
			location = new Point(4, 22);
			arg_19B0_0.Location = location;
			this.DL登录游戏栏.Name = "DL登录游戏栏";
			Control arg_19D8_0 = this.DL登录游戏栏;
			padding = new Padding(3);
			arg_19D8_0.Padding = padding;
			Control arg_19F8_0 = this.DL登录游戏栏;
			size = new Size(591, 308);
			arg_19F8_0.Size = size;
			this.DL登录游戏栏.TabIndex = 0;
			this.DL登录游戏栏.Text = "  游戏登录  ";
			this.YX游戏登录.Controls.Add(this.GroupBox4);
			this.YX游戏登录.Controls.Add(this.GroupBox3);
			this.YX游戏登录.Controls.Add(this.GroupBox5);
			Control arg_1A73_0 = this.YX游戏登录;
			location = new Point(5, -3);
			arg_1A73_0.Location = location;
			this.YX游戏登录.Name = "YX游戏登录";
			Control arg_1AA4_0 = this.YX游戏登录;
			size = new Size(580, 303);
			arg_1AA4_0.Size = size;
			this.YX游戏登录.TabIndex = 1;
			this.YX游戏登录.TabStop = false;
			this.GroupBox4.Controls.Add(this.Button4);
			this.GroupBox4.Controls.Add(this.GroupBox8);
			this.GroupBox4.Controls.Add(this.Button5);
			this.GroupBox4.Controls.Add(this.CheckBox2);
			this.GroupBox4.Controls.Add(this.CheckBox1);
			this.GroupBox4.Controls.Add(this.gl账号管理list);
			Control arg_1B64_0 = this.GroupBox4;
			location = new Point(230, 9);
			arg_1B64_0.Location = location;
			this.GroupBox4.Name = "GroupBox4";
			Control arg_1B95_0 = this.GroupBox4;
			size = new Size(344, 228);
			arg_1B95_0.Size = size;
			this.GroupBox4.TabIndex = 1;
			this.GroupBox4.TabStop = false;
			this.GroupBox4.Text = "账号管理";
			this.Button4.BackColor = SystemColors.Control;
			Control arg_1BED_0 = this.Button4;
			location = new Point(114, 166);
			arg_1BED_0.Location = location;
			this.Button4.Name = "Button4";
			Control arg_1C18_0 = this.Button4;
			size = new Size(59, 22);
			arg_1C18_0.Size = size;
			this.Button4.TabIndex = 15;
			this.Button4.Text = "删除";
			this.Button4.UseVisualStyleBackColor = false;
			this.GroupBox8.Controls.Add(this.ComboBox4);
			this.GroupBox8.Controls.Add(this.Label5);
			this.GroupBox8.Controls.Add(this.CheckBox3);
			this.GroupBox8.Controls.Add(this.checkb13);
			this.GroupBox8.Controls.Add(this.checkb14);
			this.GroupBox8.Controls.Add(this.checkb6);
			this.GroupBox8.Controls.Add(this.checkb5);
			this.GroupBox8.Controls.Add(this.checkb12);
			this.GroupBox8.Controls.Add(this.checkb11);
			this.GroupBox8.Controls.Add(this.checkb10);
			this.GroupBox8.Controls.Add(this.checkb3);
			this.GroupBox8.Controls.Add(this.checkb9);
			this.GroupBox8.Controls.Add(this.checkb2);
			this.GroupBox8.Controls.Add(this.checkb8);
			this.GroupBox8.Controls.Add(this.checkb1);
			this.GroupBox8.Controls.Add(this.checkb7);
			this.GroupBox8.Controls.Add(this.checkb4);
			Control arg_1DE7_0 = this.GroupBox8;
			location = new Point(179, 14);
			arg_1DE7_0.Location = location;
			this.GroupBox8.Name = "GroupBox8";
			Control arg_1E18_0 = this.GroupBox8;
			size = new Size(159, 208);
			arg_1E18_0.Size = size;
			this.GroupBox8.TabIndex = 18;
			this.GroupBox8.TabStop = false;
			this.GroupBox8.Text = "登录设置";
			this.ComboBox4.DropDownStyle = ComboBoxStyle.DropDownList;
			this.ComboBox4.FormattingEnabled = true;
			this.ComboBox4.Items.AddRange(new object[]
			{
				"慢速",
				"慢",
				"正常",
				"快",
				"快速"
			});
			Control arg_1EC7_0 = this.ComboBox4;
			location = new Point(43, 178);
			arg_1EC7_0.Location = location;
			this.ComboBox4.Name = "ComboBox4";
			Control arg_1EF2_0 = this.ComboBox4;
			size = new Size(52, 20);
			arg_1EF2_0.Size = size;
			this.ComboBox4.TabIndex = 66;
			this.Label5.AutoSize = true;
			Control arg_1F29_0 = this.Label5;
			location = new Point(9, 181);
			arg_1F29_0.Location = location;
			this.Label5.Name = "Label5";
			Control arg_1F54_0 = this.Label5;
			size = new Size(41, 12);
			arg_1F54_0.Size = size;
			this.Label5.TabIndex = 65;
			this.Label5.Text = "速度：";
			this.CheckBox3.AutoSize = true;
			Control arg_1F9C_0 = this.CheckBox3;
			location = new Point(104, 181);
			arg_1F9C_0.Location = location;
			this.CheckBox3.Name = "CheckBox3";
			Control arg_1FC7_0 = this.CheckBox3;
			size = new Size(48, 16);
			arg_1FC7_0.Size = size;
			this.CheckBox3.TabIndex = 64;
			this.CheckBox3.Text = "隐藏";
			this.CheckBox3.UseVisualStyleBackColor = true;
			this.checkb13.AutoSize = true;
			this.checkb13.ForeColor = Color.FromArgb(0, 0, 192);
			Control arg_2031_0 = this.checkb13;
			location = new Point(9, 88);
			arg_2031_0.Location = location;
			this.checkb13.Name = "checkb13";
			Control arg_205C_0 = this.checkb13;
			size = new Size(72, 16);
			arg_205C_0.Size = size;
			this.checkb13.TabIndex = 63;
			this.checkb13.Text = "快速行走";
			this.checkb13.UseVisualStyleBackColor = true;
			this.checkb14.AutoSize = true;
			this.checkb14.ForeColor = Color.Green;
			Control arg_20BF_0 = this.checkb14;
			location = new Point(82, 88);
			arg_20BF_0.Location = location;
			this.checkb14.Name = "checkb14";
			Control arg_20EA_0 = this.checkb14;
			size = new Size(72, 16);
			arg_20EA_0.Size = size;
			this.checkb14.TabIndex = 62;
			this.checkb14.Text = "断线重登";
			this.checkb14.UseVisualStyleBackColor = true;
			this.checkb6.AutoSize = true;
			this.checkb6.ForeColor = Color.FromArgb(192, 0, 0);
			Control arg_2157_0 = this.checkb6;
			location = new Point(9, 154);
			arg_2157_0.Location = location;
			this.checkb6.Name = "checkb6";
			Control arg_2182_0 = this.checkb6;
			size = new Size(72, 16);
			arg_2182_0.Size = size;
			this.checkb6.TabIndex = 59;
			this.checkb6.Text = "开启决斗";
			this.checkb6.UseVisualStyleBackColor = true;
			this.checkb5.AutoSize = true;
			this.checkb5.ForeColor = Color.FromArgb(0, 0, 192);
			Control arg_21EC_0 = this.checkb5;
			location = new Point(81, 110);
			arg_21EC_0.Location = location;
			this.checkb5.Name = "checkb5";
			Control arg_2217_0 = this.checkb5;
			size = new Size(72, 16);
			arg_2217_0.Size = size;
			this.checkb5.TabIndex = 55;
			this.checkb5.Text = "快速战斗";
			this.checkb5.UseVisualStyleBackColor = true;
			this.checkb12.AutoSize = true;
			this.checkb12.ForeColor = Color.FromArgb(192, 0, 0);
			Control arg_2284_0 = this.checkb12;
			location = new Point(82, 154);
			arg_2284_0.Location = location;
			this.checkb12.Name = "checkb12";
			Control arg_22AF_0 = this.checkb12;
			size = new Size(72, 16);
			arg_22AF_0.Size = size;
			this.checkb12.TabIndex = 58;
			this.checkb12.Text = "开启交易";
			this.checkb12.UseVisualStyleBackColor = true;
			this.checkb11.AutoSize = true;
			this.checkb11.ForeColor = Color.FromArgb(192, 0, 0);
			Control arg_231C_0 = this.checkb11;
			location = new Point(82, 132);
			arg_231C_0.Location = location;
			this.checkb11.Name = "checkb11";
			Control arg_2347_0 = this.checkb11;
			size = new Size(72, 16);
			arg_2347_0.Size = size;
			this.checkb11.TabIndex = 57;
			this.checkb11.Text = "开启名片";
			this.checkb11.UseVisualStyleBackColor = true;
			this.checkb10.AutoSize = true;
			this.checkb10.ForeColor = Color.FromArgb(192, 0, 0);
			Control arg_23B4_0 = this.checkb10;
			location = new Point(9, 132);
			arg_23B4_0.Location = location;
			this.checkb10.Name = "checkb10";
			Control arg_23DF_0 = this.checkb10;
			size = new Size(72, 16);
			arg_23DF_0.Size = size;
			this.checkb10.TabIndex = 56;
			this.checkb10.Text = "开启组队";
			this.checkb10.UseVisualStyleBackColor = true;
			this.checkb3.AutoSize = true;
			Control arg_2431_0 = this.checkb3;
			location = new Point(9, 66);
			arg_2431_0.Location = location;
			this.checkb3.Name = "checkb3";
			Control arg_245C_0 = this.checkb3;
			size = new Size(72, 16);
			arg_245C_0.Size = size;
			this.checkb3.TabIndex = 54;
			this.checkb3.Text = "超级加速";
			this.checkb3.UseVisualStyleBackColor = true;
			this.checkb9.AutoSize = true;
			Control arg_24AE_0 = this.checkb9;
			location = new Point(82, 66);
			arg_24AE_0.Location = location;
			this.checkb9.Name = "checkb9";
			Control arg_24D9_0 = this.checkb9;
			size = new Size(72, 16);
			arg_24D9_0.Size = size;
			this.checkb9.TabIndex = 53;
			this.checkb9.Text = "资源优化";
			this.checkb9.UseVisualStyleBackColor = true;
			this.checkb2.AutoSize = true;
			Control arg_252B_0 = this.checkb2;
			location = new Point(9, 44);
			arg_252B_0.Location = location;
			this.checkb2.Name = "checkb2";
			Control arg_2556_0 = this.checkb2;
			size = new Size(72, 16);
			arg_2556_0.Size = size;
			this.checkb2.TabIndex = 52;
			this.checkb2.Text = "图形加速";
			this.checkb2.UseVisualStyleBackColor = true;
			this.checkb8.AutoSize = true;
			Control arg_25A8_0 = this.checkb8;
			location = new Point(82, 44);
			arg_25A8_0.Location = location;
			this.checkb8.Name = "checkb8";
			Control arg_25D3_0 = this.checkb8;
			size = new Size(72, 16);
			arg_25D3_0.Size = size;
			this.checkb8.TabIndex = 51;
			this.checkb8.Text = "关闭特效";
			this.checkb8.UseVisualStyleBackColor = true;
			this.checkb1.AutoSize = true;
			Control arg_2625_0 = this.checkb1;
			location = new Point(9, 22);
			arg_2625_0.Location = location;
			this.checkb1.Name = "checkb1";
			Control arg_2650_0 = this.checkb1;
			size = new Size(72, 16);
			arg_2650_0.Size = size;
			this.checkb1.TabIndex = 50;
			this.checkb1.Text = "屏蔽人物";
			this.checkb1.UseVisualStyleBackColor = true;
			this.checkb7.AutoSize = true;
			Control arg_26A2_0 = this.checkb7;
			location = new Point(82, 22);
			arg_26A2_0.Location = location;
			this.checkb7.Name = "checkb7";
			Control arg_26CD_0 = this.checkb7;
			size = new Size(72, 16);
			arg_26CD_0.Size = size;
			this.checkb7.TabIndex = 46;
			this.checkb7.Text = "屏蔽声音";
			this.checkb7.UseVisualStyleBackColor = true;
			this.checkb4.AutoSize = true;
			this.checkb4.ForeColor = Color.FromArgb(0, 0, 192);
			Control arg_2737_0 = this.checkb4;
			location = new Point(9, 110);
			arg_2737_0.Location = location;
			this.checkb4.Name = "checkb4";
			Control arg_2762_0 = this.checkb4;
			size = new Size(72, 16);
			arg_2762_0.Size = size;
			this.checkb4.TabIndex = 41;
			this.checkb4.Text = "走动遇敌";
			this.checkb4.UseVisualStyleBackColor = true;
			this.Button5.BackColor = SystemColors.Control;
			Control arg_27BA_0 = this.Button5;
			location = new Point(6, 194);
			arg_27BA_0.Location = location;
			this.Button5.Name = "Button5";
			Control arg_27E8_0 = this.Button5;
			size = new Size(167, 28);
			arg_27E8_0.Size = size;
			this.Button5.TabIndex = 15;
			this.Button5.Text = "一键启动（F4）";
			this.Button5.UseVisualStyleBackColor = false;
			this.CheckBox2.AutoSize = true;
			Control arg_283D_0 = this.CheckBox2;
			location = new Point(60, 170);
			arg_283D_0.Location = location;
			this.CheckBox2.Name = "CheckBox2";
			Control arg_2868_0 = this.CheckBox2;
			size = new Size(48, 16);
			arg_2868_0.Size = size;
			this.CheckBox2.TabIndex = 17;
			this.CheckBox2.Text = "反选";
			this.CheckBox2.UseVisualStyleBackColor = true;
			this.CheckBox1.AutoSize = true;
			Control arg_28BC_0 = this.CheckBox1;
			location = new Point(6, 170);
			arg_28BC_0.Location = location;
			this.CheckBox1.Name = "CheckBox1";
			Control arg_28E7_0 = this.CheckBox1;
			size = new Size(48, 16);
			arg_28E7_0.Size = size;
			this.CheckBox1.TabIndex = 16;
			this.CheckBox1.Text = "全选";
			this.CheckBox1.UseVisualStyleBackColor = true;
			this.gl账号管理list.FormattingEnabled = true;
			Control arg_2938_0 = this.gl账号管理list;
			location = new Point(6, 15);
			arg_2938_0.Location = location;
			this.gl账号管理list.Name = "gl账号管理list";
			Control arg_2969_0 = this.gl账号管理list;
			size = new Size(167, 148);
			arg_2969_0.Size = size;
			this.gl账号管理list.TabIndex = 0;
			this.GroupBox3.Controls.Add(this.Button18);
			this.GroupBox3.Controls.Add(this.ComboBox2);
			this.GroupBox3.Controls.Add(this.ComboBox3);
			this.GroupBox3.Controls.Add(this.Label8);
			this.GroupBox3.Controls.Add(this.Label9);
			this.GroupBox3.Controls.Add(this.ComboBox1);
			this.GroupBox3.Controls.Add(this.Label10);
			this.GroupBox3.Controls.Add(this.Button10);
			this.GroupBox3.Controls.Add(this.Button3);
			this.GroupBox3.Controls.Add(this.Button2);
			this.GroupBox3.Controls.Add(this.Button1);
			this.GroupBox3.Controls.Add(this.js角色Text);
			this.GroupBox3.Controls.Add(this.Label7);
			this.GroupBox3.Controls.Add(this.jb脚本Text);
			this.GroupBox3.Controls.Add(this.Label6);
			this.GroupBox3.Controls.Add(this.pz配置Text);
			this.GroupBox3.Controls.Add(this.Label4);
			this.GroupBox3.Controls.Add(this.mm密码Text);
			this.GroupBox3.Controls.Add(this.zh账号Text);
			this.GroupBox3.Controls.Add(this.Label3);
			this.GroupBox3.Controls.Add(this.Label2);
			Control arg_2B71_0 = this.GroupBox3;
			location = new Point(7, 9);
			arg_2B71_0.Location = location;
			this.GroupBox3.Name = "GroupBox3";
			Control arg_2BA2_0 = this.GroupBox3;
			size = new Size(217, 228);
			arg_2BA2_0.Size = size;
			this.GroupBox3.TabIndex = 0;
			this.GroupBox3.TabStop = false;
			this.GroupBox3.Text = "账号设置";
			this.ComboBox2.DropDownStyle = ComboBoxStyle.DropDownList;
			this.ComboBox2.FormattingEnabled = true;
			this.ComboBox2.Items.AddRange(new object[]
			{
				"1",
				"2",
				"3",
				"4",
				"5",
				"6",
				"7",
				"8",
				"9",
				"10",
				"11",
				"12",
				"13",
				"14",
				"15"
			});
			Control arg_2CBB_0 = this.ComboBox2;
			location = new Point(108, 160);
			arg_2CBB_0.Location = location;
			this.ComboBox2.Name = "ComboBox2";
			Control arg_2CE6_0 = this.ComboBox2;
			size = new Size(35, 20);
			arg_2CE6_0.Size = size;
			this.ComboBox2.TabIndex = 42;
			this.ComboBox3.DropDownStyle = ComboBoxStyle.DropDownList;
			this.ComboBox3.FormattingEnabled = true;
			this.ComboBox3.Items.AddRange(new object[]
			{
				"1",
				"2"
			});
			Control arg_2D5C_0 = this.ComboBox3;
			location = new Point(174, 160);
			arg_2D5C_0.Location = location;
			this.ComboBox3.Name = "ComboBox3";
			Control arg_2D87_0 = this.ComboBox3;
			size = new Size(35, 20);
			arg_2D87_0.Size = size;
			this.ComboBox3.TabIndex = 44;
			this.Label8.AutoSize = true;
			Control arg_2DC1_0 = this.Label8;
			location = new Point(142, 164);
			arg_2DC1_0.Location = location;
			this.Label8.Name = "Label8";
			Control arg_2DEC_0 = this.Label8;
			size = new Size(41, 12);
			arg_2DEC_0.Size = size;
			this.Label8.TabIndex = 43;
			this.Label8.Text = "人物：";
			this.Label9.AutoSize = true;
			Control arg_2E34_0 = this.Label9;
			location = new Point(76, 164);
			arg_2E34_0.Location = location;
			this.Label9.Name = "Label9";
			Control arg_2E5F_0 = this.Label9;
			size = new Size(41, 12);
			arg_2E5F_0.Size = size;
			this.Label9.TabIndex = 41;
			this.Label9.Text = "副机：";
			this.ComboBox1.DropDownStyle = ComboBoxStyle.DropDownList;
			this.ComboBox1.FormattingEnabled = true;
			this.ComboBox1.Items.AddRange(new object[]
			{
				"1",
				"2",
				"3",
				"4",
				"5",
				"6",
				"7",
				"8",
				"9",
				"10",
				"11",
				"12",
				"13",
				"14",
				"15"
			});
			Control arg_2F6C_0 = this.ComboBox1;
			location = new Point(41, 160);
			arg_2F6C_0.Location = location;
			this.ComboBox1.Name = "ComboBox1";
			Control arg_2F97_0 = this.ComboBox1;
			size = new Size(35, 20);
			arg_2F97_0.Size = size;
			this.ComboBox1.TabIndex = 40;
			this.Label10.AutoSize = true;
			Control arg_2FCE_0 = this.Label10;
			location = new Point(9, 163);
			arg_2FCE_0.Location = location;
			this.Label10.Name = "Label10";
			Control arg_2FF9_0 = this.Label10;
			size = new Size(41, 12);
			arg_2FF9_0.Size = size;
			this.Label10.TabIndex = 39;
			this.Label10.Text = "主机：";
			this.Button10.BackColor = SystemColors.Control;
			this.Button10.Font = new Font("宋体", 5.25f, FontStyle.Bold);
			Control arg_3061_0 = this.Button10;
			location = new Point(176, 103);
			arg_3061_0.Location = location;
			this.Button10.Name = "Button10";
			Control arg_308C_0 = this.Button10;
			size = new Size(33, 21);
			arg_308C_0.Size = size;
			this.Button10.TabIndex = 11;
			this.Button10.Text = "...";
			this.Button10.UseVisualStyleBackColor = false;
			this.Button3.BackColor = SystemColors.Control;
			Control arg_30E8_0 = this.Button3;
			location = new Point(149, 195);
			arg_30E8_0.Location = location;
			this.Button3.Name = "Button3";
			Control arg_3113_0 = this.Button3;
			size = new Size(60, 27);
			arg_3113_0.Size = size;
			this.Button3.TabIndex = 13;
			this.Button3.Text = "添加";
			this.Button3.UseVisualStyleBackColor = false;
			this.Button2.BackColor = SystemColors.Control;
			Control arg_316C_0 = this.Button2;
			location = new Point(83, 195);
			arg_316C_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_3197_0 = this.Button2;
			size = new Size(60, 27);
			arg_3197_0.Size = size;
			this.Button2.TabIndex = 14;
			this.Button2.Text = "修改";
			this.Button2.UseVisualStyleBackColor = false;
			this.Button1.BackColor = SystemColors.Control;
			this.Button1.Font = new Font("宋体", 5.25f, FontStyle.Bold, GraphicsUnit.Point, 134);
			Control arg_3212_0 = this.Button1;
			location = new Point(176, 76);
			arg_3212_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_323D_0 = this.Button1;
			size = new Size(33, 21);
			arg_323D_0.Size = size;
			this.Button1.TabIndex = 9;
			this.Button1.Text = "...";
			this.Button1.UseVisualStyleBackColor = false;
			Control arg_3285_0 = this.js角色Text;
			location = new Point(41, 130);
			arg_3285_0.Location = location;
			this.js角色Text.Name = "js角色Text";
			Control arg_32B3_0 = this.js角色Text;
			size = new Size(168, 21);
			arg_32B3_0.Size = size;
			this.js角色Text.TabIndex = 12;
			this.Label7.AutoSize = true;
			Control arg_32EA_0 = this.Label7;
			location = new Point(9, 133);
			arg_32EA_0.Location = location;
			this.Label7.Name = "Label7";
			Control arg_3315_0 = this.Label7;
			size = new Size(41, 12);
			arg_3315_0.Size = size;
			this.Label7.TabIndex = 10;
			this.Label7.Text = "角色：";
			Control arg_334D_0 = this.jb脚本Text;
			location = new Point(41, 103);
			arg_334D_0.Location = location;
			this.jb脚本Text.Name = "jb脚本Text";
			Control arg_337B_0 = this.jb脚本Text;
			size = new Size(133, 21);
			arg_337B_0.Size = size;
			this.jb脚本Text.TabIndex = 10;
			this.jb脚本Text.Text = "不启动";
			this.Label6.AutoSize = true;
			Control arg_33BF_0 = this.Label6;
			location = new Point(8, 106);
			arg_33BF_0.Location = location;
			this.Label6.Name = "Label6";
			Control arg_33EA_0 = this.Label6;
			size = new Size(41, 12);
			arg_33EA_0.Size = size;
			this.Label6.TabIndex = 8;
			this.Label6.Text = "脚本：";
			Control arg_3421_0 = this.pz配置Text;
			location = new Point(41, 76);
			arg_3421_0.Location = location;
			this.pz配置Text.Name = "pz配置Text";
			Control arg_344F_0 = this.pz配置Text;
			size = new Size(133, 21);
			arg_344F_0.Size = size;
			this.pz配置Text.TabIndex = 8;
			this.pz配置Text.Text = "不读取";
			this.Label4.AutoSize = true;
			Control arg_3492_0 = this.Label4;
			location = new Point(8, 79);
			arg_3492_0.Location = location;
			this.Label4.Name = "Label4";
			Control arg_34BD_0 = this.Label4;
			size = new Size(41, 12);
			arg_34BD_0.Size = size;
			this.Label4.TabIndex = 5;
			this.Label4.Text = "配置：";
			Control arg_34F4_0 = this.mm密码Text;
			location = new Point(41, 49);
			arg_34F4_0.Location = location;
			this.mm密码Text.Name = "mm密码Text";
			Control arg_3522_0 = this.mm密码Text;
			size = new Size(168, 21);
			arg_3522_0.Size = size;
			this.mm密码Text.TabIndex = 3;
			Control arg_3548_0 = this.zh账号Text;
			location = new Point(41, 22);
			arg_3548_0.Location = location;
			this.zh账号Text.Name = "zh账号Text";
			Control arg_3576_0 = this.zh账号Text;
			size = new Size(168, 21);
			arg_3576_0.Size = size;
			this.zh账号Text.TabIndex = 2;
			this.Label3.AutoSize = true;
			Control arg_35A8_0 = this.Label3;
			location = new Point(7, 52);
			arg_35A8_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_35D3_0 = this.Label3;
			size = new Size(41, 12);
			arg_35D3_0.Size = size;
			this.Label3.TabIndex = 1;
			this.Label3.Text = "密码：";
			this.Label2.AutoSize = true;
			Control arg_3616_0 = this.Label2;
			location = new Point(7, 25);
			arg_3616_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_3641_0 = this.Label2;
			size = new Size(41, 12);
			arg_3641_0.Size = size;
			this.Label2.TabIndex = 0;
			this.Label2.Text = "账号：";
			this.GroupBox5.Controls.Add(this.rz认证text);
			this.GroupBox5.Controls.Add(this.CheckBox4);
			this.GroupBox5.Controls.Add(this.yx游戏Text);
			this.GroupBox5.Controls.Add(this.Label12);
			this.GroupBox5.Controls.Add(this.wg外挂Text);
			this.GroupBox5.Controls.Add(this.Label11);
			this.GroupBox5.Controls.Add(this.lj路径Text);
			this.GroupBox5.Controls.Add(this.Label20);
			this.GroupBox5.Controls.Add(this.Button7);
			this.GroupBox5.Controls.Add(this.Button6);
			Control arg_3760_0 = this.GroupBox5;
			location = new Point(7, 243);
			arg_3760_0.Location = location;
			this.GroupBox5.Name = "GroupBox5";
			Control arg_378E_0 = this.GroupBox5;
			size = new Size(567, 50);
			arg_378E_0.Size = size;
			this.GroupBox5.TabIndex = 2;
			this.GroupBox5.TabStop = false;
			this.GroupBox5.Text = "AS外挂属性配置";
			Control arg_37D5_0 = this.rz认证text;
			location = new Point(332, 21);
			arg_37D5_0.Location = location;
			this.rz认证text.Name = "rz认证text";
			Control arg_3800_0 = this.rz认证text;
			size = new Size(50, 21);
			arg_3800_0.Size = size;
			this.rz认证text.TabIndex = 66;
			this.CheckBox4.AutoSize = true;
			this.CheckBox4.ForeColor = Color.Blue;
			Control arg_3848_0 = this.CheckBox4;
			location = new Point(286, 24);
			arg_3848_0.Location = location;
			this.CheckBox4.Name = "CheckBox4";
			Control arg_3873_0 = this.CheckBox4;
			size = new Size(48, 16);
			arg_3873_0.Size = size;
			this.CheckBox4.TabIndex = 65;
			this.CheckBox4.Text = "认证";
			this.CheckBox4.UseVisualStyleBackColor = true;
			Control arg_38BB_0 = this.yx游戏Text;
			location = new Point(511, 21);
			arg_38BB_0.Location = location;
			this.yx游戏Text.Name = "yx游戏Text";
			Control arg_38E6_0 = this.yx游戏Text;
			size = new Size(50, 21);
			arg_38E6_0.Size = size;
			this.yx游戏Text.TabIndex = 49;
			this.Label12.AutoSize = true;
			Control arg_391D_0 = this.Label12;
			location = new Point(476, 25);
			arg_391D_0.Location = location;
			this.Label12.Name = "Label12";
			Control arg_3948_0 = this.Label12;
			size = new Size(41, 12);
			arg_3948_0.Size = size;
			this.Label12.TabIndex = 48;
			this.Label12.Text = "游戏：";
			Control arg_3983_0 = this.wg外挂Text;
			location = new Point(422, 21);
			arg_3983_0.Location = location;
			this.wg外挂Text.Name = "wg外挂Text";
			Control arg_39AE_0 = this.wg外挂Text;
			size = new Size(50, 21);
			arg_39AE_0.Size = size;
			this.wg外挂Text.TabIndex = 47;
			this.Label11.AutoSize = true;
			Control arg_39E5_0 = this.Label11;
			location = new Point(387, 25);
			arg_39E5_0.Location = location;
			this.Label11.Name = "Label11";
			Control arg_3A10_0 = this.Label11;
			size = new Size(41, 12);
			arg_3A10_0.Size = size;
			this.Label11.TabIndex = 46;
			this.Label11.Text = "外挂：";
			Control arg_3A48_0 = this.lj路径Text;
			location = new Point(39, 20);
			arg_3A48_0.Location = location;
			this.lj路径Text.Name = "lj路径Text";
			Control arg_3A76_0 = this.lj路径Text;
			size = new Size(135, 21);
			arg_3A76_0.Size = size;
			this.lj路径Text.TabIndex = 14;
			this.Label20.AutoSize = true;
			Control arg_3AA9_0 = this.Label20;
			location = new Point(6, 23);
			arg_3AA9_0.Location = location;
			this.Label20.Name = "Label20";
			Control arg_3AD4_0 = this.Label20;
			size = new Size(41, 12);
			arg_3AD4_0.Size = size;
			this.Label20.TabIndex = 43;
			this.Label20.Text = "路径：";
			this.Button7.BackColor = SystemColors.Control;
			Control arg_3B20_0 = this.Button7;
			location = new Point(205, 20);
			arg_3B20_0.Location = location;
			this.Button7.Name = "Button7";
			Control arg_3B4B_0 = this.Button7;
			size = new Size(73, 21);
			arg_3B4B_0.Size = size;
			this.Button7.TabIndex = 16;
			this.Button7.Text = "单独启动";
			this.Button7.UseVisualStyleBackColor = false;
			this.Button6.BackColor = SystemColors.Control;
			this.Button6.Font = new Font("宋体", 5.25f, FontStyle.Bold);
			Control arg_3BC0_0 = this.Button6;
			location = new Point(176, 20);
			arg_3BC0_0.Location = location;
			this.Button6.Name = "Button6";
			Control arg_3BEB_0 = this.Button6;
			size = new Size(29, 21);
			arg_3BEB_0.Size = size;
			this.Button6.TabIndex = 15;
			this.Button6.Text = "...";
			this.Button6.UseVisualStyleBackColor = false;
			this.TabControl2.Controls.Add(this.DL登录游戏栏);
			this.TabControl2.Controls.Add(this.JK监控状态栏);
			this.TabControl2.Controls.Add(this.BB版本信息栏);
			Control arg_3C73_0 = this.TabControl2;
			location = new Point(5, 3);
			arg_3C73_0.Location = location;
			this.TabControl2.Name = "TabControl2";
			this.TabControl2.SelectedIndex = 0;
			Control arg_3CB1_0 = this.TabControl2;
			size = new Size(599, 334);
			arg_3CB1_0.Size = size;
			this.TabControl2.TabIndex = 23;
			this.Label21.AutoSize = true;
			Control arg_3CEB_0 = this.Label21;
			location = new Point(646, 400);
			arg_3CEB_0.Location = location;
			this.Label21.Name = "Label21";
			Control arg_3D16_0 = this.Label21;
			size = new Size(119, 12);
			arg_3D16_0.Size = size;
			this.Label21.TabIndex = 42;
			this.Label21.Text = "批量关闭 只启动一个";
			this.Label21.Visible = false;
			this.Timer1.Enabled = true;
			this.Timer1.Interval = 30000;
			this.XiTong.Items.AddRange(new ToolStripItem[]
			{
				this.托盘显示界面,
				this.托盘隐藏界面,
				this.ToolStripSeparator9,
				this.托盘关于梦幻执事,
				this.托盘反馈,
				this.ToolStripSeparator10,
				this.托盘退出
			});
			this.XiTong.Name = "XiTong";
			Control arg_3DF3_0 = this.XiTong;
			size = new Size(125, 126);
			arg_3DF3_0.Size = size;
			this.托盘显示界面.Image = (Image)componentResourceManager.GetObject("托盘显示界面.Image");
			this.托盘显示界面.Name = "托盘显示界面";
			ToolStripItem arg_3E3A_0 = this.托盘显示界面;
			size = new Size(124, 22);
			arg_3E3A_0.Size = size;
			this.托盘显示界面.Text = "显示界面";
			this.托盘隐藏界面.Image = (Image)componentResourceManager.GetObject("托盘隐藏界面.Image");
			this.托盘隐藏界面.Name = "托盘隐藏界面";
			ToolStripItem arg_3E92_0 = this.托盘隐藏界面;
			size = new Size(124, 22);
			arg_3E92_0.Size = size;
			this.托盘隐藏界面.Text = "隐藏界面";
			this.ToolStripSeparator9.Name = "ToolStripSeparator9";
			ToolStripItem arg_3ECD_0 = this.ToolStripSeparator9;
			size = new Size(121, 6);
			arg_3ECD_0.Size = size;
			this.托盘关于梦幻执事.Image = (Image)componentResourceManager.GetObject("托盘关于梦幻执事.Image");
			this.托盘关于梦幻执事.Name = "托盘关于梦幻执事";
			ToolStripItem arg_3F14_0 = this.托盘关于梦幻执事;
			size = new Size(124, 22);
			arg_3F14_0.Size = size;
			this.托盘关于梦幻执事.Text = "关于监控";
			this.托盘反馈.Image = (Image)componentResourceManager.GetObject("托盘反馈.Image");
			this.托盘反馈.Name = "托盘反馈";
			ToolStripItem arg_3F6C_0 = this.托盘反馈;
			size = new Size(124, 22);
			arg_3F6C_0.Size = size;
			this.托盘反馈.Text = "反馈";
			this.ToolStripSeparator10.Name = "ToolStripSeparator10";
			ToolStripItem arg_3FA7_0 = this.ToolStripSeparator10;
			size = new Size(121, 6);
			arg_3FA7_0.Size = size;
			this.托盘退出.Image = (Image)componentResourceManager.GetObject("托盘退出.Image");
			this.托盘退出.Name = "托盘退出";
			ToolStripItem arg_3FEE_0 = this.托盘退出;
			size = new Size(124, 22);
			arg_3FEE_0.Size = size;
			this.托盘退出.Text = "退出";
			this.NotifyIcon1.ContextMenuStrip = this.XiTong;
			this.NotifyIcon1.Icon = (Icon)componentResourceManager.GetObject("NotifyIcon1.Icon");
			this.NotifyIcon1.Text = "Stw监控";
			this.NotifyIcon1.Visible = true;
			this.Button18.BackColor = SystemColors.Control;
			Control arg_4077_0 = this.Button18;
			location = new Point(6, 195);
			arg_4077_0.Location = location;
			this.Button18.Name = "Button18";
			Control arg_40A2_0 = this.Button18;
			size = new Size(71, 27);
			arg_40A2_0.Size = size;
			this.Button18.TabIndex = 45;
			this.Button18.Text = "批量修改";
			this.Button18.UseVisualStyleBackColor = false;
			SizeF autoScaleDimensions = new SizeF(6f, 12f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(607, 518);
			this.ClientSize = size;
			this.Controls.Add(this.Label21);
			this.Controls.Add(this.GroupBox7);
			this.Controls.Add(this.Button16);
			this.Controls.Add(this.TabControl2);
			this.Controls.Add(this.GroupBox6);
			this.FormBorderStyle = FormBorderStyle.FixedDialog;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.MaximizeBox = false;
			this.Name = "ZJ主界面";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "AS外挂监控_标准版";
			this.GroupBox6.ResumeLayout(false);
			this.GroupBox7.ResumeLayout(false);
			this.BB版本信息栏.ResumeLayout(false);
			this.GroupBox16.ResumeLayout(false);
			this.GroupBox16.PerformLayout();
			this.JK监控状态栏.ResumeLayout(false);
			this.JK监控状态.ResumeLayout(false);
			this.DL登录游戏栏.ResumeLayout(false);
			this.YX游戏登录.ResumeLayout(false);
			this.GroupBox4.ResumeLayout(false);
			this.GroupBox4.PerformLayout();
			this.GroupBox8.ResumeLayout(false);
			this.GroupBox8.PerformLayout();
			this.GroupBox3.ResumeLayout(false);
			this.GroupBox3.PerformLayout();
			this.GroupBox5.ResumeLayout(false);
			this.GroupBox5.PerformLayout();
			this.TabControl2.ResumeLayout(false);
			this.XiTong.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		public static extern bool RegisterHotKey(IntPtr hwnd, int id, int fsModifiers, int vk);

		[DllImport("user32.dll", CharSet = CharSet.Auto, EntryPoint = "UnregisterHotKey", SetLastError = true)]
		public static extern bool UnRegisterHotKey(IntPtr hwnd, int id);

		[DllImport("shell32.dll", CharSet = CharSet.Ansi, EntryPoint = "ShellExecuteA", ExactSpelling = true, SetLastError = true)]
		private static extern int ShellExecute(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpOperation, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFile, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpParameters, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDirectory, int nShowCmd);

		[DllImport("user32", CharSet = CharSet.Ansi, EntryPoint = "keybd_event", ExactSpelling = true, SetLastError = true)]
		private static extern void JP键盘按下(byte bVk, byte bScan, int dwFlags, int dwExtraInfo);

		[DllImport("user32", CharSet = CharSet.Ansi, EntryPoint = "FindWindowA", ExactSpelling = true, SetLastError = true)]
		private static extern int FindWindow([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

		[DllImport("user32", CharSet = CharSet.Ansi, EntryPoint = "GetClassNameA", ExactSpelling = true, SetLastError = true)]
		public static extern int GetClassName(int hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, int nMaxCount);

		[DllImport("user32", CharSet = CharSet.Ansi, EntryPoint = "GetWindowTextA", ExactSpelling = true, SetLastError = true)]
		public static extern int GetWindowText(IntPtr hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

		[DllImport("user32", CharSet = CharSet.Ansi, EntryPoint = "FindWindowExA", ExactSpelling = true, SetLastError = true)]
		private static extern int XZ寻找子控件(int hWnd1, int hWnd2, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpsz1, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpsz2);

		[DllImport("user32", CharSet = CharSet.Ansi, EntryPoint = "SendMessageA", ExactSpelling = true, SetLastError = true)]
		public static extern int FS发送信息(IntPtr hwnd, int wMsg, int wParam, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lParam);

		[DllImport("user32", CharSet = CharSet.Ansi, EntryPoint = "SetForegroundWindow", ExactSpelling = true, SetLastError = true)]
		private static extern int JH激活句柄(int hwnd);

		[DllImport("user32", CharSet = CharSet.Ansi, EntryPoint = "MoveWindow", ExactSpelling = true, SetLastError = true)]
		private static extern int YD移动窗口(int hwnd, int x, int y, int nWidth, int nHeight, int bRepaint);

		[DllImport("user32", CharSet = CharSet.Ansi, EntryPoint = "PostMessageA", ExactSpelling = true, SetLastError = true)]
		public static extern int PostMessage(int hwnd, int wMsg, int wParam, int lParam);

		[DllImport("user32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		private static extern int GetDesktopWindow();

		[DllImport("user32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		private static extern int GetForegroundWindow();

		[DllImport("user32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		private static extern int GetWindow(int hwnd, int wCmd);

		public long ZX找寻句柄(long 句柄, string 类名, string 标题)
		{
			int arg_0E_0 = checked((int)句柄);
			int arg_0E_1 = 0;
			string text = null;
			string text2 = null;
			long num = (long)ZJ主界面.XZ寻找子控件(arg_0E_0, arg_0E_1, ref text, ref text2);
			bool flag = num != 0L;
			long result;
			if (flag)
			{
				ZJ主界面.JB句柄遍历 jB句柄遍历;
				jB句柄遍历.JB句柄 = num;
				jB句柄遍历.LM类名 = Strings.Replace(this.HQ获取句柄类名(num), "\0", "", 1, -1, CompareMethod.Binary);
				jB句柄遍历.BT标题 = Strings.Replace(this.HQ获取句柄标题(num), "\0", "", 1, -1, CompareMethod.Binary);
				flag = (Operators.CompareString(jB句柄遍历.LM类名, 类名, false) == 0 & Operators.CompareString(jB句柄遍历.BT标题, 标题, false) == 0);
				if (flag)
				{
					result = jB句柄遍历.JB句柄;
					return result;
				}
				long num2 = this.ZX找寻句柄(num, 类名, 标题);
				flag = (num2 != 0L);
				if (flag)
				{
					result = num2;
					return result;
				}
			}
			while (num != 0L)
			{
				int arg_DB_0;
				int arg_DB_1;
				checked
				{
					arg_DB_0 = (int)句柄;
					arg_DB_1 = (int)num;
					text2 = null;
					text = null;
				}
				num = (long)ZJ主界面.XZ寻找子控件(arg_DB_0, arg_DB_1, ref text2, ref text);
				flag = (num != 0L);
				if (flag)
				{
					ZJ主界面.JB句柄遍历 jB句柄遍历2;
					jB句柄遍历2.JB句柄 = num;
					jB句柄遍历2.LM类名 = Strings.Replace(this.HQ获取句柄类名(num), "\0", "", 1, -1, CompareMethod.Binary);
					jB句柄遍历2.BT标题 = Strings.Replace(this.HQ获取句柄标题(num), "\0", "", 1, -1, CompareMethod.Binary);
					flag = (Operators.CompareString(jB句柄遍历2.LM类名, 类名, false) == 0 & Operators.CompareString(jB句柄遍历2.BT标题, 标题, false) == 0);
					if (flag)
					{
						result = jB句柄遍历2.JB句柄;
						break;
					}
					long num3 = this.ZX找寻句柄(num, 类名, 标题);
					flag = (num3 != 0L);
					if (flag)
					{
						result = num3;
						break;
					}
				}
			}
			return result;
		}

		public long ZX找寻句柄(long 句柄, string 标题)
		{
			int arg_0E_0 = checked((int)句柄);
			int arg_0E_1 = 0;
			string text = null;
			string text2 = null;
			long num = (long)ZJ主界面.XZ寻找子控件(arg_0E_0, arg_0E_1, ref text, ref text2);
			bool flag = num != 0L;
			long result;
			if (flag)
			{
				ZJ主界面.JB句柄遍历 jB句柄遍历;
				jB句柄遍历.JB句柄 = num;
				jB句柄遍历.LM类名 = Strings.Replace(this.HQ获取句柄类名(num), "\0", "", 1, -1, CompareMethod.Binary);
				jB句柄遍历.BT标题 = Strings.Replace(this.HQ获取句柄标题(num), "\0", "", 1, -1, CompareMethod.Binary);
				flag = (Operators.CompareString(jB句柄遍历.BT标题, 标题, false) == 0);
				if (flag)
				{
					result = jB句柄遍历.JB句柄;
					return result;
				}
				long num2 = this.ZX找寻句柄(num, 标题);
				flag = (num2 != 0L);
				if (flag)
				{
					result = num2;
					return result;
				}
			}
			while (num != 0L)
			{
				int arg_C8_0;
				int arg_C8_1;
				checked
				{
					arg_C8_0 = (int)句柄;
					arg_C8_1 = (int)num;
					text2 = null;
					text = null;
				}
				num = (long)ZJ主界面.XZ寻找子控件(arg_C8_0, arg_C8_1, ref text2, ref text);
				flag = (num != 0L);
				if (flag)
				{
					ZJ主界面.JB句柄遍历 jB句柄遍历2;
					jB句柄遍历2.JB句柄 = num;
					jB句柄遍历2.LM类名 = Strings.Replace(this.HQ获取句柄类名(num), "\0", "", 1, -1, CompareMethod.Binary);
					jB句柄遍历2.BT标题 = Strings.Replace(this.HQ获取句柄标题(num), "\0", "", 1, -1, CompareMethod.Binary);
					flag = (Operators.CompareString(jB句柄遍历2.BT标题, 标题, false) == 0);
					if (flag)
					{
						result = jB句柄遍历2.JB句柄;
						break;
					}
					long num3 = this.ZX找寻句柄(num, 标题);
					flag = (num3 != 0L);
					if (flag)
					{
						result = num3;
						break;
					}
				}
			}
			return result;
		}

		public long ZX找寻句柄(long 句柄, string 标题, long 同名位置)
		{
			int arg_0E_0 = checked((int)句柄);
			int arg_0E_1 = 0;
			string text = null;
			string text2 = null;
			long num = (long)ZJ主界面.XZ寻找子控件(arg_0E_0, arg_0E_1, ref text, ref text2);
			bool flag = num != 0L;
			checked
			{
				long result;
				if (flag)
				{
					ZJ主界面.JB句柄遍历 jB句柄遍历;
					jB句柄遍历.JB句柄 = num;
					jB句柄遍历.LM类名 = Strings.Replace(this.HQ获取句柄类名(num), "\0", "", 1, -1, CompareMethod.Binary);
					jB句柄遍历.BT标题 = Strings.Replace(this.HQ获取句柄标题(num), "\0", "", 1, -1, CompareMethod.Binary);
					flag = (Operators.CompareString(jB句柄遍历.BT标题, 标题, false) == 0);
					if (flag)
					{
						同名位置 -= 1L;
						flag = (同名位置 <= 0L);
						if (flag)
						{
							result = jB句柄遍历.JB句柄;
							return result;
						}
					}
					else
					{
						long num2 = this.ZX找寻句柄(num, 标题, 同名位置);
						flag = (num2 != 0L);
						if (flag)
						{
							result = num2;
							return result;
						}
					}
				}
				while (num != 0L)
				{
					int arg_DD_0 = (int)句柄;
					int arg_DD_1 = (int)num;
					text2 = null;
					text = null;
					num = unchecked((long)ZJ主界面.XZ寻找子控件(arg_DD_0, arg_DD_1, ref text2, ref text));
					flag = (num != 0L);
					if (flag)
					{
						ZJ主界面.JB句柄遍历 jB句柄遍历2;
						jB句柄遍历2.JB句柄 = num;
						jB句柄遍历2.LM类名 = Strings.Replace(this.HQ获取句柄类名(num), "\0", "", 1, -1, CompareMethod.Binary);
						jB句柄遍历2.BT标题 = Strings.Replace(this.HQ获取句柄标题(num), "\0", "", 1, -1, CompareMethod.Binary);
						flag = (Operators.CompareString(jB句柄遍历2.BT标题, 标题, false) == 0);
						if (flag)
						{
							同名位置 -= 1L;
							flag = (同名位置 <= 0L);
							if (flag)
							{
								result = jB句柄遍历2.JB句柄;
								break;
							}
						}
						else
						{
							long num3 = this.ZX找寻句柄(num, 标题, 同名位置);
							flag = (num3 != 0L);
							if (flag)
							{
								result = num3;
								break;
							}
						}
					}
				}
				return result;
			}
		}

		public long JB句柄定位(long 句柄, long 位置)
		{
			int arg_0D_0 = checked((int)句柄);
			int arg_0D_1 = 0;
			string text = null;
			string text2 = null;
			long num = (long)ZJ主界面.XZ寻找子控件(arg_0D_0, arg_0D_1, ref text, ref text2);
			bool flag = 位置 <= 1L;
			checked
			{
				long result;
				if (flag)
				{
					result = num;
				}
				else
				{
					long arg_2E_0 = 1L;
					long num2 = 位置 - 1L;
					long num3 = arg_2E_0;
					while (true)
					{
						long arg_52_0 = num3;
						long num4 = num2;
						if (arg_52_0 > num4)
						{
							break;
						}
						int arg_3E_0 = (int)句柄;
						int arg_3E_1 = (int)num;
						text2 = null;
						text = null;
						num = unchecked((long)ZJ主界面.XZ寻找子控件(arg_3E_0, arg_3E_1, ref text2, ref text));
						num3 += 1L;
					}
					result = num;
				}
				return result;
			}
		}

		public string HQ获取句柄类名(long 句柄)
		{
			string text = new string('\0', 256);
			ZJ主界面.GetClassName(checked((int)句柄), ref text, 256);
			string expression = text.ToString();
			return Strings.Replace(expression, "\0", "", 1, -1, CompareMethod.Binary);
		}

		public string HQ获取句柄标题(long 句柄)
		{
			string text = new string('\0', 256);
			ZJ主界面.GetWindowText((IntPtr)句柄, ref text, 256);
			string expression = text.ToString();
			return Strings.Replace(expression, "\0", "", 1, -1, CompareMethod.Binary);
		}

		public void JZ加载数据信息()
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				this.Label13.Text = "剩余时间 " + Conversions.ToString(QJ全局声明.FW服务器信息参数.SY剩余) + " 天";
				IL_35:
				num2 = 3;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				IL_6B:
				num2 = 4;
				this.XR写日志("机器码（" + QJ全局声明.FW服务器信息参数.JQ机器码 + "）", Color.FromArgb(255, 100, 10), true);
				IL_9C:
				num2 = 5;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				IL_D2:
				num2 = 6;
				this.XR写日志("时  间（" + QJ全局声明.FW服务器信息参数.FW服务器时间 + "）", Color.FromArgb(255, 100, 10), true);
				IL_103:
				num2 = 7;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				IL_139:
				num2 = 8;
				this.XR写日志("有效期（" + QJ全局声明.FW服务器信息参数.YX有效期 + " 00:00:00）", Color.FromArgb(255, 100, 10), true);
				IL_16A:
				num2 = 9;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				IL_1A1:
				num2 = 10;
				this.XR写日志("剩  余（" + Conversions.ToString(QJ全局声明.FW服务器信息参数.SY剩余) + " 天）", Color.FromArgb(255, 100, 10), true);
				IL_1D8:
				num2 = 11;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				IL_20F:
				num2 = 12;
				this.XR写日志("线  路（服务器-线路" + Conversions.ToString((int)(checked(QJ全局声明.FW服务器信息参数.XL线路 + 1))) + "）", Color.FromArgb(255, 100, 10), true);
				IL_248:
				num2 = 13;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				IL_27F:
				num2 = 14;
				this.XR写日志("IP数据（" + QJ全局声明.FW服务器信息参数.IP地址_外网 + "）", Color.FromArgb(255, 100, 10), true);
				IL_2B1:
				num2 = 15;
				bool flag = Operators.CompareString(QJ全局声明.FW服务器信息参数.BD绑定服, "是", false) == 0;
				if (!flag)
				{
					goto IL_39A;
				}
				IL_2D5:
				num2 = 16;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				IL_30C:
				num2 = 17;
				this.XR写日志("绑  定（" + QJ全局声明.FW服务器信息参数.DH代号 + "）", Color.FromArgb(255, 100, 10), true);
				IL_33E:
				num2 = 18;
				this.wg外挂Text.Text = QJ全局声明.FW服务器信息参数.WG外挂名;
				IL_357:
				num2 = 19;
				this.yx游戏Text.Text = QJ全局声明.FW服务器信息参数.YX游戏名;
				IL_370:
				num2 = 20;
				this.WG外挂名称 = this.wg外挂Text.Text;
				IL_384:
				num2 = 21;
				this.YX游戏名称 = this.yx游戏Text.Text;
				IL_398:
				goto IL_3F3;
				IL_39A:
				num2 = 23;
				IL_39E:
				num2 = 24;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				IL_3D5:
				num2 = 25;
				this.XR写日志("绑  定（无绑定）", Color.FromArgb(255, 100, 10), true);
				IL_3F3:
				IL_3F4:
				goto IL_4BD;
				IL_3FC:
				int arg_401_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_401_0);
				IL_476:
				goto IL_4B2;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_490:
				goto IL_4B2;
			}
			object arg_492_0;
			endfilter(arg_492_0 is Exception & num != 0 & num3 == 0);
			IL_4B2:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_4BD:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void ZJ主界面_FontChanged(object sender, EventArgs e)
		{
			ZJ主界面.UnRegisterHotKey(this.Handle, 0);
		}

		protected override void WndProc(ref Message m)
		{
			bool flag = m.Msg == 786;
			if (flag)
			{
				this.Button5_Click(null, null);
			}
			base.WndProc(ref m);
		}

		private void ZJ主界面_FormClosing(object sender, FormClosingEventArgs e)
		{
			bool flag = e.CloseReason == CloseReason.UserClosing;
			if (flag)
			{
				e.Cancel = true;
				this.Hide();
			}
		}

		private void ZJ主界面_Load(object sender, EventArgs e)
		{
			bool flag = QJ全局声明.FW服务器信息参数.SY剩余 <= 3;
			if (flag)
			{
				Interaction.MsgBox("该机器码即将到期！剩余 " + Conversions.ToString(QJ全局声明.FW服务器信息参数.SY剩余) + "天", MsgBoxStyle.Information, "信息");
			}
			this.jk监控list = new ListViewDoubleBuffered();
			ZJ主界面.RegisterHotKey(this.Handle, 0, 0, 115);
			this.Text += QJ全局声明.DQ当前版本;
			this.Label14.Text = this.Label14.Text + QJ全局声明.DQ当前版本;
			this.DQ读取数据();
			this.JZ加载数据信息();
			ListViewDoubleBuffered listViewDoubleBuffered = this.jk监控list;
			listViewDoubleBuffered.Clear();
			listViewDoubleBuffered.GridLines = true;
			listViewDoubleBuffered.View = View.Details;
			listViewDoubleBuffered.FullRowSelect = true;
			listViewDoubleBuffered.Columns.Add("序列", 40);
			listViewDoubleBuffered.Columns.Add("    账号", 90);
			listViewDoubleBuffered.Columns.Add("      角色", 120);
			listViewDoubleBuffered.Columns.Add("       脚本", 100);
			listViewDoubleBuffered.Columns.Add(" 等级", 50);
			listViewDoubleBuffered.Columns.Add("  血量", 70);
			listViewDoubleBuffered.Columns.Add(" 气力", 60);
			this.jk监控list.SelectedIndexChanged += delegate(object a0, EventArgs a1)
			{
				this.jk监控list_按下();
			};
			this.JK监控状态.Controls.Add(this.jk监控list);
			Control arg_193_0 = this.jk监控list;
			Point location = new Point(6, 10);
			arg_193_0.Location = location;
			this.jk监控list.Width = 568;
			this.jk监控list.Height = 260;
			this.jk监控list.Show();
			this.ComboBox1.SelectedIndex = 0;
			this.ComboBox2.SelectedIndex = 0;
			this.ComboBox3.SelectedIndex = 0;
			Thread thread = new Thread(new ThreadStart(this.QC全程监控_线程));
			thread.Start();
		}

		public void QC全程监控_线程()
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2;
				while (true)
				{
					IL_0A:
					num2 = 3;
					Thread.Sleep(200);
					IL_17:
					num2 = 4;
					this.SX刷新进程外挂数据();
					IL_20:
					num2 = 5;
					Application.DoEvents();
					IL_28:;
				}
				IL_2A:
				goto IL_A0;
				IL_2F:
				int arg_34_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_34_0);
				IL_59:
				goto IL_95;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_73:
				goto IL_95;
			}
			object arg_75_0;
			endfilter(arg_75_0 is Exception & num != 0 & num3 == 0);
			IL_95:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_A0:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		public long SX刷新进程外挂数据()
		{
			int num;
			int num4;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				long num3 = this.JB句柄定位((long)this.HQ获取句柄("注意"), 1L);
				IL_21:
				num2 = 3;
				bool flag = num3 != 0L;
				if (!flag)
				{
					goto IL_4B;
				}
				IL_32:
				num2 = 4;
				IntPtr arg_45_0 = (IntPtr)num3;
				int arg_45_1 = 245;
				int arg_45_2 = 0;
				string text = null;
				ZJ主界面.FS发送信息(arg_45_0, arg_45_1, arg_45_2, ref text);
				IL_4B:
				num2 = 6;
				num3 = this.JB句柄定位((long)this.HQ获取句柄("脚本讯息"), 1L);
				IL_63:
				num2 = 7;
				flag = (num3 != 0L);
				if (!flag)
				{
					goto IL_8D;
				}
				IL_74:
				num2 = 8;
				IntPtr arg_87_0 = (IntPtr)num3;
				int arg_87_1 = 245;
				int arg_87_2 = 0;
				text = null;
				ZJ主界面.FS发送信息(arg_87_0, arg_87_1, arg_87_2, ref text);
				IL_8D:
				num2 = 10;
				num3 = this.JB句柄定位((long)this.HQ获取句柄("注意"), 1L);
				IL_A6:
				num2 = 11;
				flag = (num3 != 0L);
				if (!flag)
				{
					goto IL_D2;
				}
				IL_B8:
				num2 = 12;
				IntPtr arg_CC_0 = (IntPtr)num3;
				int arg_CC_1 = 245;
				int arg_CC_2 = 0;
				text = null;
				ZJ主界面.FS发送信息(arg_CC_0, arg_CC_1, arg_CC_2, ref text);
				IL_D2:
				num2 = 14;
				num3 = this.JB句柄定位((long)this.HQ获取句柄("错误讯息"), 1L);
				IL_EB:
				num2 = 15;
				flag = (num3 != 0L);
				if (!flag)
				{
					goto IL_117;
				}
				IL_FD:
				num2 = 16;
				IntPtr arg_111_0 = (IntPtr)num3;
				int arg_111_1 = 245;
				int arg_111_2 = 0;
				text = null;
				ZJ主界面.FS发送信息(arg_111_0, arg_111_1, arg_111_2, ref text);
				IL_117:
				num2 = 18;
				num3 = this.JB句柄定位((long)this.HQ获取句柄("脚本错误"), 1L);
				IL_130:
				num2 = 19;
				flag = (num3 != 0L);
				if (!flag)
				{
					goto IL_15C;
				}
				IL_142:
				num2 = 20;
				IntPtr arg_156_0 = (IntPtr)num3;
				int arg_156_1 = 245;
				int arg_156_2 = 0;
				text = null;
				ZJ主界面.FS发送信息(arg_156_0, arg_156_1, arg_156_2, ref text);
				IL_15C:
				num2 = 22;
				num3 = this.JB句柄定位((long)this.HQ获取句柄("广告讯息"), 1L);
				IL_175:
				num2 = 23;
				flag = (num3 != 0L);
				if (!flag)
				{
					goto IL_1A1;
				}
				IL_187:
				num2 = 24;
				IntPtr arg_19B_0 = (IntPtr)num3;
				int arg_19B_1 = 245;
				int arg_19B_2 = 0;
				text = null;
				ZJ主界面.FS发送信息(arg_19B_0, arg_19B_1, arg_19B_2, ref text);
				IL_1A1:
				num2 = 26;
				num3 = this.JB句柄定位((long)this.HQ获取句柄("登陆讯息"), 1L);
				IL_1BA:
				num2 = 27;
				flag = (num3 != 0L);
				if (!flag)
				{
					goto IL_1E6;
				}
				IL_1CC:
				num2 = 28;
				IntPtr arg_1E0_0 = (IntPtr)num3;
				int arg_1E0_1 = 245;
				int arg_1E0_2 = 0;
				text = null;
				ZJ主界面.FS发送信息(arg_1E0_0, arg_1E0_1, arg_1E0_2, ref text);
				IL_1E6:
				goto IL_2BD;
				IL_1EF:
				int arg_1F6_0 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_1F6_0);
				IL_273:
				goto IL_2B2;
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_28F:
				goto IL_2B2;
			}
			object arg_291_0;
			endfilter(arg_291_0 is Exception & num != 0 & num4 == 0);
			IL_2B2:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_2BD:
			long num5;
			long arg_2C7_0 = num5;
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
			return arg_2C7_0;
		}

		private void jk监控list_按下()
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				bool flag = this.jk监控list.SelectedItems[0].Index < 0;
				if (!flag)
				{
					goto IL_2E;
				}
				IL_28:
				goto IL_C4;
				IL_2E:
				num2 = 5;
				this.jb句柄list.SelectedIndex = this.jk监控list.SelectedItems[0].Index;
				IL_52:
				goto IL_C4;
				IL_57:
				int arg_5C_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_5C_0);
				IL_7D:
				goto IL_B9;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_97:
				goto IL_B9;
			}
			object arg_99_0;
			endfilter(arg_99_0 is Exception & num != 0 & num3 == 0);
			IL_B9:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_C4:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		[MethodImpl((MethodImplOptions)72)]
		public void DQ读取数据()
		{
			int num;
			int num20;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_0A:
				int num2 = 2;
				this.ComboBox1.SelectedIndex = 0;
				IL_1A:
				num2 = 3;
				this.ComboBox2.SelectedIndex = 0;
				IL_2A:
				num2 = 4;
				this.ComboBox3.SelectedIndex = 0;
				IL_3A:
				num2 = 5;
				this.ComboBox4.SelectedIndex = 2;
				IL_4A:
				num2 = 6;
				string expression = "";
				IL_53:
				num2 = 7;
				bool flag = Operators.CompareString(FileSystem.Dir(Application.StartupPath + "\\date.DLL", FileAttribute.Normal), "", false) != 0;
				if (!flag)
				{
					goto IL_377;
				}
				IL_85:
				num2 = 8;
				expression = File.ReadAllText(Application.StartupPath + "\\date.DLL", Encoding.Default);
				IL_A2:
				num2 = 9;
				string[] array = Strings.Split(expression, "#", -1, CompareMethod.Binary);
				IL_B4:
				num2 = 10;
				string[] array2 = Strings.Split(array[0], "@", -1, CompareMethod.Binary);
				IL_C8:
				num2 = 11;
				int arg_D8_0 = 0;
				checked
				{
					int num3 = Information.UBound(array2, 1) - 1;
					int num4 = arg_D8_0;
					while (true)
					{
						int arg_11B_0 = num4;
						int num5 = num3;
						if (arg_11B_0 > num5)
						{
							break;
						}
						IL_DB:
						num2 = 12;
						this.gl账号管理list.Items.Add(array2[num4]);
						IL_F3:
						num2 = 13;
						this.zh账号list.Items.Add(array2[num4]);
						IL_10B:
						num2 = 14;
						num4++;
					}
					IL_11D:
					num2 = 15;
					array2 = Strings.Split(array[1], "@", -1, CompareMethod.Binary);
					IL_131:
					num2 = 16;
					int arg_141_0 = 0;
					int num6 = Information.UBound(array2, 1) - 1;
					int num7 = arg_141_0;
					while (true)
					{
						int arg_171_0 = num7;
						int num5 = num6;
						if (arg_171_0 > num5)
						{
							break;
						}
						IL_145:
						num2 = 17;
						this.mm密码list.Items.Add(array2[num7]);
						IL_15E:
						num2 = 18;
						num7++;
					}
					IL_173:
					num2 = 19;
					array2 = Strings.Split(array[2], "@", -1, CompareMethod.Binary);
					IL_187:
					num2 = 20;
					int arg_197_0 = 0;
					int num8 = Information.UBound(array2, 1) - 1;
					int num9 = arg_197_0;
					while (true)
					{
						int arg_1C7_0 = num9;
						int num5 = num8;
						if (arg_1C7_0 > num5)
						{
							break;
						}
						IL_19B:
						num2 = 21;
						this.pz配置list.Items.Add(array2[num9]);
						IL_1B4:
						num2 = 22;
						num9++;
					}
					IL_1C9:
					num2 = 23;
					array2 = Strings.Split(array[3], "@", -1, CompareMethod.Binary);
					IL_1DD:
					num2 = 24;
					int arg_1ED_0 = 0;
					int num10 = Information.UBound(array2, 1) - 1;
					int num11 = arg_1ED_0;
					while (true)
					{
						int arg_21D_0 = num11;
						int num5 = num10;
						if (arg_21D_0 > num5)
						{
							break;
						}
						IL_1F1:
						num2 = 25;
						this.jb脚本list.Items.Add(array2[num11]);
						IL_20A:
						num2 = 26;
						num11++;
					}
					IL_21F:
					num2 = 27;
					array2 = Strings.Split(array[4], "@", -1, CompareMethod.Binary);
					IL_233:
					num2 = 28;
					int arg_243_0 = 0;
					int num12 = Information.UBound(array2, 1) - 1;
					int num13 = arg_243_0;
					while (true)
					{
						int arg_273_0 = num13;
						int num5 = num12;
						if (arg_273_0 > num5)
						{
							break;
						}
						IL_247:
						num2 = 29;
						this.js角色list.Items.Add(array2[num13]);
						IL_260:
						num2 = 30;
						num13++;
					}
					IL_275:
					num2 = 31;
					array2 = Strings.Split(array[5], "@", -1, CompareMethod.Binary);
					IL_289:
					num2 = 32;
					int arg_299_0 = 0;
					int num14 = Information.UBound(array2, 1) - 1;
					int num15 = arg_299_0;
					while (true)
					{
						int arg_2C9_0 = num15;
						int num5 = num14;
						if (arg_2C9_0 > num5)
						{
							break;
						}
						IL_29D:
						num2 = 33;
						this.zj主机list.Items.Add(array2[num15]);
						IL_2B6:
						num2 = 34;
						num15++;
					}
					IL_2CB:
					num2 = 35;
					array2 = Strings.Split(array[6], "@", -1, CompareMethod.Binary);
					IL_2DF:
					num2 = 36;
					int arg_2EF_0 = 0;
					int num16 = Information.UBound(array2, 1) - 1;
					int num17 = arg_2EF_0;
					while (true)
					{
						int arg_31F_0 = num17;
						int num5 = num16;
						if (arg_31F_0 > num5)
						{
							break;
						}
						IL_2F3:
						num2 = 37;
						this.fj副机list.Items.Add(array2[num17]);
						IL_30C:
						num2 = 38;
						num17++;
					}
					IL_321:
					num2 = 39;
					array2 = Strings.Split(array[7], "@", -1, CompareMethod.Binary);
					IL_335:
					num2 = 40;
					int arg_345_0 = 0;
					int num18 = Information.UBound(array2, 1) - 1;
					int num19 = arg_345_0;
					while (true)
					{
						int arg_375_0 = num19;
						int num5 = num18;
						if (arg_375_0 > num5)
						{
							break;
						}
						IL_349:
						num2 = 41;
						this.rw人物list.Items.Add(array2[num19]);
						IL_362:
						num2 = 42;
						num19++;
					}
					IL_377:
					IL_378:
					num2 = 44;
					flag = (Operators.CompareString(FileSystem.Dir(Application.StartupPath + "\\dateLj.DLL", FileAttribute.Normal), "", false) != 0);
					if (!flag)
					{
						goto IL_5F5;
					}
					IL_3AB:
					num2 = 45;
					expression = File.ReadAllText(Application.StartupPath + "\\dateLj.DLL", Encoding.Default);
					IL_3C9:
					num2 = 46;
					array = Strings.Split(expression, "#", -1, CompareMethod.Binary);
					IL_3DB:
					num2 = 47;
					this.checkb1.Checked = Conversions.ToBoolean(array[0]);
					IL_3F3:
					num2 = 48;
					this.checkb2.Checked = Conversions.ToBoolean(array[1]);
					IL_40B:
					num2 = 49;
					this.checkb3.Checked = Conversions.ToBoolean(array[2]);
					IL_423:
					num2 = 50;
					this.checkb4.Checked = Conversions.ToBoolean(array[3]);
					IL_43B:
					num2 = 51;
					this.checkb5.Checked = Conversions.ToBoolean(array[4]);
					IL_453:
					num2 = 52;
					this.checkb6.Checked = Conversions.ToBoolean(array[5]);
					IL_46B:
					num2 = 53;
					this.checkb7.Checked = Conversions.ToBoolean(array[6]);
					IL_483:
					num2 = 54;
					this.checkb8.Checked = Conversions.ToBoolean(array[7]);
					IL_49B:
					num2 = 55;
					this.checkb9.Checked = Conversions.ToBoolean(array[8]);
					IL_4B3:
					num2 = 56;
					this.checkb10.Checked = Conversions.ToBoolean(array[9]);
					IL_4CC:
					num2 = 57;
					this.checkb11.Checked = Conversions.ToBoolean(array[10]);
					IL_4E5:
					num2 = 58;
					this.checkb12.Checked = Conversions.ToBoolean(array[11]);
					IL_4FE:
					num2 = 59;
					this.checkb13.Checked = Conversions.ToBoolean(array[12]);
					IL_517:
					num2 = 60;
					this.checkb14.Checked = Conversions.ToBoolean(array[13]);
					IL_530:
					num2 = 61;
					this.ComboBox4.SelectedIndex = Conversions.ToInteger(array[14]);
					IL_549:
					num2 = 62;
					this.lj路径Text.Text = array[15];
					IL_55D:
					num2 = 63;
					this.wg外挂Text.Text = array[16];
					IL_571:
					num2 = 64;
					this.yx游戏Text.Text = array[17];
					IL_585:
					num2 = 65;
					this.CheckBox3.Checked = Conversions.ToBoolean(array[18]);
					IL_59E:
					num2 = 66;
					this.CheckBox4.Checked = Conversions.ToBoolean(array[19]);
					IL_5B7:
					num2 = 67;
					this.rz认证text.Text = array[20];
					IL_5CB:
					num2 = 68;
					this.WG外挂名称 = this.wg外挂Text.Text;
					IL_5E0:
					num2 = 69;
					this.YX游戏名称 = this.yx游戏Text.Text;
					IL_5F5:
					IL_5F6:
					goto IL_778;
					IL_5FF:;
				}
				int arg_606_0 = num20 + 1;
				num20 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_606_0);
				IL_72B:
				goto IL_76D;
				num20 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_749:
				goto IL_76D;
			}
			object arg_74B_0;
			endfilter(arg_74B_0 is Exception & num != 0 & num20 == 0);
			IL_76D:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_778:
			if (num20 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void XR写日志(string 内容, Color 颜色, bool 换行)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				double a = (double)Strings.Len(this.RichTextBox1.Text);
				IL_1E:
				num2 = 3;
				if (!换行)
				{
					goto IL_38;
				}
				IL_28:
				num2 = 4;
				内容 += "\r\n";
				IL_38:
				num2 = 6;
				this.RichTextBox1.AppendText(内容);
				IL_48:
				num2 = 7;
				this.RichTextBox1.SelectionStart = checked((int)Math.Round(a));
				IL_5E:
				num2 = 8;
				this.RichTextBox1.SelectionLength = Strings.Len(内容);
				IL_73:
				num2 = 9;
				this.RichTextBox1.SelectionColor = 颜色;
				IL_84:
				num2 = 10;
				this.RichTextBox1.SelectionStart = this.RichTextBox1.TextLength;
				IL_9F:
				num2 = 11;
				this.RichTextBox1.ScrollToCaret();
				IL_AF:
				goto IL_13D;
				IL_B7:
				int arg_BC_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_BC_0);
				IL_F5:
				goto IL_132;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_110:
				goto IL_132;
			}
			object arg_112_0;
			endfilter(arg_112_0 is Exception & num != 0 & num3 == 0);
			IL_132:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_13D:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void Button3_Click(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(Strings.Trim(this.zh账号Text.Text), "", false) == 0 | Operators.CompareString(Strings.Trim(this.mm密码Text.Text), "", false) == 0 | Operators.CompareString(Strings.Trim(this.pz配置Text.Text), "", false) == 0 | Operators.CompareString(Strings.Trim(this.jb脚本Text.Text), "", false) == 0 | Operators.CompareString(Strings.Trim(this.js角色Text.Text), "", false) == 0;
			if (flag)
			{
				Interaction.MsgBox("账号设置错误，请检查...", MsgBoxStyle.Critical, "信息");
			}
			else
			{
				flag = this.gl账号管理list.Items.Contains(this.zh账号Text.Text);
				if (flag)
				{
					Interaction.MsgBox("该账号已经存在", MsgBoxStyle.Information, "信息");
				}
				else
				{
					flag = this.js角色list.Items.Contains(Strings.Trim(this.js角色Text.Text));
					if (flag)
					{
						Interaction.MsgBox("该角色名称已经存在,请换一个角色名（无需和游戏相同）", MsgBoxStyle.Information, "信息");
					}
					else
					{
						this.gl账号管理list.Items.Add(this.zh账号Text.Text);
						this.zh账号list.Items.Add(this.zh账号Text.Text);
						this.mm密码list.Items.Add(this.mm密码Text.Text);
						this.zj主机list.Items.Add(this.ComboBox1.SelectedIndex);
						this.fj副机list.Items.Add(this.ComboBox2.SelectedIndex);
						this.rw人物list.Items.Add(this.ComboBox3.SelectedIndex);
						this.pz配置list.Items.Add(this.pz配置Text.Text);
						this.jb脚本list.Items.Add(this.jb脚本Text.Text);
						this.js角色list.Items.Add(this.js角色Text.Text);
						this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
						this.XR写日志("添加账号： " + this.zh账号Text.Text, Color.FromArgb(255, 255, 10), true);
						this.BC保存数据();
						this.CS参数保存();
					}
				}
			}
		}

		public void CS参数保存()
		{
			string value = string.Concat(new string[]
			{
				Conversions.ToString(this.checkb1.Checked),
				"#",
				Conversions.ToString(this.checkb2.Checked),
				"#",
				Conversions.ToString(this.checkb3.Checked),
				"#",
				Conversions.ToString(this.checkb4.Checked),
				"#",
				Conversions.ToString(this.checkb5.Checked),
				"#",
				Conversions.ToString(this.checkb6.Checked),
				"#",
				Conversions.ToString(this.checkb7.Checked),
				"#",
				Conversions.ToString(this.checkb8.Checked),
				"#",
				Conversions.ToString(this.checkb9.Checked),
				"#",
				Conversions.ToString(this.checkb10.Checked),
				"#",
				Conversions.ToString(this.checkb11.Checked),
				"#",
				Conversions.ToString(this.checkb12.Checked),
				"#",
				Conversions.ToString(this.checkb13.Checked),
				"#",
				Conversions.ToString(this.checkb14.Checked),
				"#",
				Conversions.ToString(this.ComboBox4.SelectedIndex),
				"#",
				this.lj路径Text.Text,
				"#",
				this.wg外挂Text.Text,
				"#",
				this.yx游戏Text.Text,
				"#",
				Conversions.ToString(this.CheckBox3.Checked),
				"#",
				Conversions.ToString(this.CheckBox4.Checked),
				"#",
				this.rz认证text.Text
			});
			StreamWriter streamWriter = new StreamWriter(Application.StartupPath + "\\dateLj.DLL", false, Encoding.Unicode);
			streamWriter.Write(value);
			streamWriter.Close();
		}

		public void BC保存数据()
		{
			string text = "";
			int arg_1C_0 = 0;
			checked
			{
				int num = this.zh账号list.Items.Count - 1;
				int num2 = arg_1C_0;
				while (true)
				{
					int arg_52_0 = num2;
					int num3 = num;
					if (arg_52_0 > num3)
					{
						break;
					}
					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(text, this.zh账号list.Items[num2]), "@"));
					num2++;
				}
				text += "#";
				int arg_75_0 = 0;
				int num4 = this.mm密码list.Items.Count - 1;
				int num5 = arg_75_0;
				while (true)
				{
					int arg_AB_0 = num5;
					int num3 = num4;
					if (arg_AB_0 > num3)
					{
						break;
					}
					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(text, this.mm密码list.Items[num5]), "@"));
					num5++;
				}
				text += "#";
				int arg_CE_0 = 0;
				int num6 = this.pz配置list.Items.Count - 1;
				int num7 = arg_CE_0;
				while (true)
				{
					int arg_109_0 = num7;
					int num3 = num6;
					if (arg_109_0 > num3)
					{
						break;
					}
					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(text, this.pz配置list.Items[num7]), "@"));
					num7++;
				}
				text += "#";
				int arg_12C_0 = 0;
				int num8 = this.jb脚本list.Items.Count - 1;
				int num9 = arg_12C_0;
				while (true)
				{
					int arg_167_0 = num9;
					int num3 = num8;
					if (arg_167_0 > num3)
					{
						break;
					}
					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(text, this.jb脚本list.Items[num9]), "@"));
					num9++;
				}
				text += "#";
				int arg_18A_0 = 0;
				int num10 = this.js角色list.Items.Count - 1;
				int num11 = arg_18A_0;
				while (true)
				{
					int arg_1C5_0 = num11;
					int num3 = num10;
					if (arg_1C5_0 > num3)
					{
						break;
					}
					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(text, this.js角色list.Items[num11]), "@"));
					num11++;
				}
				text += "#";
				int arg_1E8_0 = 0;
				int num12 = this.zj主机list.Items.Count - 1;
				int num13 = arg_1E8_0;
				while (true)
				{
					int arg_223_0 = num13;
					int num3 = num12;
					if (arg_223_0 > num3)
					{
						break;
					}
					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(text, this.zj主机list.Items[num13]), "@"));
					num13++;
				}
				text += "#";
				int arg_246_0 = 0;
				int num14 = this.fj副机list.Items.Count - 1;
				int num15 = arg_246_0;
				while (true)
				{
					int arg_281_0 = num15;
					int num3 = num14;
					if (arg_281_0 > num3)
					{
						break;
					}
					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(text, this.fj副机list.Items[num15]), "@"));
					num15++;
				}
				text += "#";
				int arg_2A4_0 = 0;
				int num16 = this.rw人物list.Items.Count - 1;
				int num17 = arg_2A4_0;
				while (true)
				{
					int arg_2DF_0 = num17;
					int num3 = num16;
					if (arg_2DF_0 > num3)
					{
						break;
					}
					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(text, this.rw人物list.Items[num17]), "@"));
					num17++;
				}
				text += "#";
				StreamWriter streamWriter = new StreamWriter(Application.StartupPath + "\\Date.DLL", false, Encoding.Unicode);
				streamWriter.Write(text);
				streamWriter.Close();
			}
		}

		private void gl账号管理list_Click(object sender, EventArgs e)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				bool flag = this.gl账号管理list.SelectedIndex < 0;
				if (!flag)
				{
					goto IL_23;
				}
				IL_1D:
				goto IL_228;
				IL_23:
				num2 = 5;
				this.zh账号Text.Text = Conversions.ToString(this.zh账号list.Items[this.gl账号管理list.SelectedIndex]);
				IL_51:
				num2 = 6;
				this.mm密码Text.Text = Conversions.ToString(this.mm密码list.Items[this.gl账号管理list.SelectedIndex]);
				IL_7F:
				num2 = 7;
				this.ComboBox1.SelectedIndex = Conversions.ToInteger(this.zj主机list.Items[this.gl账号管理list.SelectedIndex]);
				IL_AD:
				num2 = 8;
				this.ComboBox2.SelectedIndex = Conversions.ToInteger(this.fj副机list.Items[this.gl账号管理list.SelectedIndex]);
				IL_DB:
				num2 = 9;
				this.ComboBox3.SelectedIndex = Conversions.ToInteger(this.rw人物list.Items[this.gl账号管理list.SelectedIndex]);
				IL_10A:
				num2 = 10;
				this.pz配置Text.Text = Conversions.ToString(this.pz配置list.Items[this.gl账号管理list.SelectedIndex]);
				IL_139:
				num2 = 11;
				this.jb脚本Text.Text = Conversions.ToString(this.jb脚本list.Items[this.gl账号管理list.SelectedIndex]);
				IL_168:
				num2 = 12;
				this.js角色Text.Text = Conversions.ToString(this.js角色list.Items[this.gl账号管理list.SelectedIndex]);
				IL_197:
				goto IL_228;
				IL_19F:
				int arg_1A4_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_1A4_0);
				IL_1E1:
				goto IL_21D;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_1FB:
				goto IL_21D;
			}
			object arg_1FD_0;
			endfilter(arg_1FD_0 is Exception & num != 0 & num3 == 0);
			IL_21D:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_228:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void Button2_Click(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(Strings.Trim(this.zh账号Text.Text), "", false) == 0 | Operators.CompareString(Strings.Trim(this.mm密码Text.Text), "", false) == 0 | Operators.CompareString(Strings.Trim(this.pz配置Text.Text), "", false) == 0 | Operators.CompareString(Strings.Trim(this.jb脚本Text.Text), "", false) == 0 | Operators.CompareString(Strings.Trim(this.js角色Text.Text), "", false) == 0;
			if (flag)
			{
				Interaction.MsgBox("账号设置错误，不能有空项目,请检查...", MsgBoxStyle.Critical, "信息");
			}
			else
			{
				this.gl账号管理list.Items[this.gl账号管理list.SelectedIndex] = this.zh账号Text.Text;
				this.zh账号list.Items[this.gl账号管理list.SelectedIndex] = this.zh账号Text.Text;
				this.mm密码list.Items[this.gl账号管理list.SelectedIndex] = this.mm密码Text.Text;
				this.zj主机list.Items[this.gl账号管理list.SelectedIndex] = this.ComboBox1.SelectedIndex;
				this.fj副机list.Items[this.gl账号管理list.SelectedIndex] = this.ComboBox2.SelectedIndex;
				this.rw人物list.Items[this.gl账号管理list.SelectedIndex] = this.ComboBox3.SelectedIndex;
				this.pz配置list.Items[this.gl账号管理list.SelectedIndex] = this.pz配置Text.Text;
				this.jb脚本list.Items[this.gl账号管理list.SelectedIndex] = this.jb脚本Text.Text;
				this.js角色list.Items[this.gl账号管理list.SelectedIndex] = this.js角色Text.Text;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				this.XR写日志("修改账号： " + this.zh账号Text.Text, Color.FromArgb(255, 255, 10), true);
				this.BC保存数据();
				this.CS参数保存();
			}
		}

		public string DK打开文件(string 扩展名, string 筛选内容, byte 返回参数)
		{
			string result;
			try
			{
				OpenFileDialog openFileDialog = new OpenFileDialog();
				openFileDialog.DefaultExt = 扩展名;
				openFileDialog.Filter = 筛选内容;
				bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
				if (flag)
				{
					string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(openFileDialog.FileName);
					string fileName = openFileDialog.FileName;
					string pathRoot = Path.GetPathRoot(openFileDialog.FileName);
					flag = (返回参数 == 1);
					if (flag)
					{
						result = fileNameWithoutExtension;
					}
					else
					{
						flag = (返回参数 == 2);
						if (flag)
						{
							result = fileName;
						}
						else
						{
							flag = (返回参数 == 3);
							if (flag)
							{
								result = pathRoot;
							}
						}
					}
				}
			}
			finally
			{
			}
			return result;
		}

		private void Button6_Click(object sender, EventArgs e)
		{
			string text = this.DK打开文件("*.exe", "AS外挂(*.exe)|*.exe", 2);
			bool flag = Operators.CompareString(text, "", false) != 0;
			if (flag)
			{
				this.lj路径Text.Text = text;
				this.lj路径Text.SelectionStart = this.lj路径Text.Text.Length;
				this.lj路径Text.ScrollToCaret();
				this.lj路径Text.Focus();
			}
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			string text = this.DK打开文件("*.SET", "AS外挂配置(*.SET)|*.SET", 2);
			bool flag = Operators.CompareString(text, "", false) != 0;
			if (flag)
			{
				this.pz配置Text.Text = text;
				this.pz配置Text.SelectionStart = this.pz配置Text.Text.Length;
				this.pz配置Text.ScrollToCaret();
				this.pz配置Text.Focus();
			}
		}

		private void Button10_Click(object sender, EventArgs e)
		{
			string text = this.DK打开文件("*.asc,*.txt", "AS外挂脚本(*.asc;*.txt)|*.asc;*.txt", 2);
			bool flag = Operators.CompareString(text, "", false) != 0;
			if (flag)
			{
				this.jb脚本Text.Text = Strings.Mid(text, checked(Strings.InStrRev(text, "\\", -1, CompareMethod.Binary) + 1));
				this.jb脚本Text.SelectionStart = this.jb脚本Text.Text.Length;
				this.jb脚本Text.ScrollToCaret();
				this.jb脚本Text.Focus();
			}
		}

		private void Button4_Click(object sender, EventArgs e)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				bool flag = this.gl账号管理list.SelectedIndex < 0;
				if (!flag)
				{
					goto IL_25;
				}
				IL_1F:
				goto IL_29E;
				IL_25:
				num2 = 5;
				flag = (Interaction.MsgBox(Operators.ConcatenateObject(Operators.ConcatenateObject("是否删除： ", this.gl账号管理list.Items[this.gl账号管理list.SelectedIndex]), " 这个账号？"), MsgBoxStyle.YesNo | MsgBoxStyle.Question, "信息") == MsgBoxResult.Yes);
				if (!flag)
				{
					goto IL_1F4;
				}
				IL_6E:
				num2 = 6;
				this.zh账号list.Items.RemoveAt(this.gl账号管理list.SelectedIndex);
				IL_8C:
				num2 = 7;
				this.mm密码list.Items.RemoveAt(this.gl账号管理list.SelectedIndex);
				IL_AA:
				num2 = 8;
				this.pz配置list.Items.RemoveAt(this.gl账号管理list.SelectedIndex);
				IL_C8:
				num2 = 9;
				this.jb脚本list.Items.RemoveAt(this.gl账号管理list.SelectedIndex);
				IL_E7:
				num2 = 10;
				this.js角色list.Items.RemoveAt(this.gl账号管理list.SelectedIndex);
				IL_106:
				num2 = 11;
				this.zj主机list.Items.RemoveAt(this.gl账号管理list.SelectedIndex);
				IL_125:
				num2 = 12;
				this.fj副机list.Items.RemoveAt(this.gl账号管理list.SelectedIndex);
				IL_144:
				num2 = 13;
				this.rw人物list.Items.RemoveAt(this.gl账号管理list.SelectedIndex);
				IL_163:
				num2 = 14;
				this.gl账号管理list.Items.RemoveAt(this.gl账号管理list.SelectedIndex);
				IL_182:
				num2 = 15;
				this.BC保存数据();
				IL_18C:
				num2 = 16;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				IL_1C3:
				num2 = 17;
				this.XR写日志("删除账号： " + this.zh账号Text.Text, Color.FromArgb(255, 255, 10), true);
				IL_1F4:
				IL_1F5:
				goto IL_29E;
				IL_1FD:
				int arg_202_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_202_0);
				IL_257:
				goto IL_293;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_271:
				goto IL_293;
			}
			object arg_273_0;
			endfilter(arg_273_0 is Exception & num != 0 & num3 == 0);
			IL_293:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_29E:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		[MethodImpl((MethodImplOptions)72)]
		private void Button5_Click(object sender, EventArgs e)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				this.BC保存数据();
				IL_13:
				num2 = 3;
				this.CS参数保存();
				IL_1D:
				num2 = 4;
				bool flag = QJ全局声明.FW服务器信息参数.SY剩余 <= 0;
				if (!flag)
				{
					goto IL_57;
				}
				IL_36:
				num2 = 5;
				Interaction.MsgBox("你的使用已经到期", MsgBoxStyle.Critical, "信息");
				ProjectData.EndApp();
				IL_51:
				goto IL_408;
				IL_57:
				IL_58:
				num2 = 9;
				flag = (Operators.CompareString(Strings.Trim(this.lj路径Text.Text), "", false) == 0);
				if (!flag)
				{
					goto IL_9C;
				}
				IL_80:
				num2 = 10;
				Interaction.MsgBox("外挂路径不能为空", MsgBoxStyle.Critical, "信息");
				IL_96:
				goto IL_408;
				IL_9C:
				IL_9D:
				num2 = 13;
				flag = (this.ComboBox4.SelectedIndex == 0);
				if (!flag)
				{
					goto IL_C4;
				}
				IL_B5:
				num2 = 14;
				this.JS加速 = 3f;
				IL_C4:
				num2 = 16;
				flag = (this.ComboBox4.SelectedIndex == 1);
				if (!flag)
				{
					goto IL_EB;
				}
				IL_DC:
				num2 = 17;
				this.JS加速 = 2.5f;
				IL_EB:
				num2 = 19;
				flag = (this.ComboBox4.SelectedIndex == 2);
				if (!flag)
				{
					goto IL_112;
				}
				IL_103:
				num2 = 20;
				this.JS加速 = 2f;
				IL_112:
				num2 = 22;
				flag = (this.ComboBox4.SelectedIndex == 3);
				if (!flag)
				{
					goto IL_139;
				}
				IL_12A:
				num2 = 23;
				this.JS加速 = 1.5f;
				IL_139:
				num2 = 25;
				flag = (this.ComboBox4.SelectedIndex == 4);
				if (!flag)
				{
					goto IL_160;
				}
				IL_151:
				num2 = 26;
				this.JS加速 = 1f;
				IL_160:
				num2 = 28;
				flag = (Operators.CompareString(this.Button5.Text, "一键停止（F4）", false) == 0);
				if (!flag)
				{
					goto IL_1FB;
				}
				IL_183:
				num2 = 29;
				this.Button5.Text = "一键启动（F4）";
				IL_198:
				num2 = 30;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				IL_1D0:
				num2 = 31;
				this.XR写日志("停止一键启动", Color.FromArgb(255, 255, 255), true);
				IL_1F5:
				goto IL_408;
				IL_1FB:
				IL_1FC:
				num2 = 34;
				flag = (this.gl账号管理list.CheckedItems.Count == 0);
				if (!flag)
				{
					goto IL_235;
				}
				IL_219:
				num2 = 35;
				Interaction.MsgBox("账号管理中没有准备登录的账号\r\n请在需要登录账号前打勾√", MsgBoxStyle.Information, "信息");
				IL_22F:
				goto IL_408;
				IL_235:
				IL_236:
				num2 = 38;
				this.Button5.Text = "一键停止（F4）";
				IL_24B:
				num2 = 39;
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				IL_283:
				num2 = 40;
				this.XR写日志(Conversions.ToString(this.gl账号管理list.CheckedItems.Count) + " 个账号准备登录", Color.FromArgb(255, 255, 255), true);
				IL_2C2:
				num2 = 41;
				Thread thread = new Thread(new ThreadStart(this.QD启动线程_线程));
				IL_2D9:
				num2 = 42;
				thread.Start();
				IL_2E4:
				num2 = 43;
				this.TabControl2.SelectedTab = this.JK监控状态栏;
				IL_2FA:
				goto IL_408;
				IL_302:
				int arg_307_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_307_0);
				IL_3C0:
				goto IL_3FD;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_3DB:
				goto IL_3FD;
			}
			object arg_3DD_0;
			endfilter(arg_3DD_0 is Exception & num != 0 & num3 == 0);
			IL_3FD:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_408:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		[MethodImpl((MethodImplOptions)72)]
		private void Button7_Click(object sender, EventArgs e)
		{
			bool flag = QJ全局声明.FW服务器信息参数.SY剩余 <= 0;
			if (flag)
			{
				Interaction.MsgBox("你的使用已经到期", MsgBoxStyle.Critical, "信息");
				ProjectData.EndApp();
			}
			else
			{
				flag = (Operators.CompareString(Strings.Trim(this.lj路径Text.Text), "", false) == 0);
				if (flag)
				{
					Interaction.MsgBox("外挂路径不能为空", MsgBoxStyle.Critical, "信息");
				}
				else
				{
					this.DK打开外部地址(this.lj路径Text.Text);
				}
			}
		}

		public void DK打开外部地址(string 路径或网址)
		{
			int num;
			int num4;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_0A:
				int num2 = 2;
				bool flag = Strings.InStr(路径或网址, "\\", CompareMethod.Binary) != 0;
				if (!flag)
				{
					goto IL_5F;
				}
				IL_22:
				num2 = 3;
				int num3 = Strings.InStrRev(路径或网址, "\\", -1, CompareMethod.Binary);
				IL_33:
				num2 = 4;
				int arg_57_0 = 0;
				string text = "open";
				string text2 = "";
				checked
				{
					string text3 = Strings.Mid(路径或网址, 1, num3 - 1);
					ZJ主界面.ShellExecute(arg_57_0, ref text, ref 路径或网址, ref text2, ref text3, 1);
					IL_5D:
					goto IL_9E;
					IL_5F:
					num2 = 6;
					IL_63:
					num2 = 7;
					num3 = Strings.InStrRev(路径或网址, "/", -1, CompareMethod.Binary);
					IL_74:
					num2 = 8;
					int arg_98_0 = 0;
					text3 = "open";
					text2 = "";
					text = Strings.Mid(路径或网址, 1, num3 - 1);
					ZJ主界面.ShellExecute(arg_98_0, ref text3, ref 路径或网址, ref text2, ref text, 1);
					IL_9E:
					IL_9F:
					goto IL_12D;
					IL_A8:;
				}
				int arg_AF_0 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_AF_0);
				IL_E0:
				goto IL_122;
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_FE:
				goto IL_122;
			}
			object arg_100_0;
			endfilter(arg_100_0 is Exception & num != 0 & num4 == 0);
			IL_122:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_12D:
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void CheckBox1_CheckedChanged(object sender, EventArgs e)
		{
			int arg_15_0 = 0;
			checked
			{
				int num = this.gl账号管理list.Items.Count - 1;
				int num2 = arg_15_0;
				while (true)
				{
					int arg_5E_0 = num2;
					int num3 = num;
					if (arg_5E_0 > num3)
					{
						break;
					}
					bool flag = this.CheckBox1.Checked;
					if (flag)
					{
						this.gl账号管理list.SetItemChecked(num2, true);
					}
					flag = !this.CheckBox1.Checked;
					if (flag)
					{
						this.gl账号管理list.SetItemChecked(num2, false);
					}
					num2++;
				}
			}
		}

		private void CheckBox2_CheckedChanged(object sender, EventArgs e)
		{
			int arg_15_0 = 0;
			checked
			{
				int num = this.gl账号管理list.Items.Count - 1;
				int num2 = arg_15_0;
				while (true)
				{
					int arg_3D_0 = num2;
					int num3 = num;
					if (arg_3D_0 > num3)
					{
						break;
					}
					this.gl账号管理list.SetItemChecked(num2, !this.gl账号管理list.GetItemChecked(num2));
					num2++;
				}
			}
		}

		private void Button13_Click(object sender, EventArgs e)
		{
			this.HS函数集.DK打开URL("http://user.qzone.qq.com/27485203/blog/1478676357");
		}

		private void Button15_Click(object sender, EventArgs e)
		{
			Thread thread = new Thread(new ThreadStart(this.CX查询版本_线程));
			thread.Start();
		}

		public void CX查询版本_线程()
		{
			this.Button15.Enabled = false;
			string connectionString = "Server=581f1d4f3a63a.gz.cdb.myqcloud.com;User ID=youke;Password=gELbb8pKJAlPQFbV;Database=test;port=3817;";
			MySqlConnection mySqlConnection = new MySqlConnection(connectionString);
			bool flag;
			string text;
			try
			{
				mySqlConnection.Open();
				string cmdText = "select * from 属性验证 WHERE 属性 = '属性'";
				MySqlCommand selectCommand = new MySqlCommand(cmdText, mySqlConnection);
				MySqlDataAdapter mySqlDataAdapter = new MySqlDataAdapter(selectCommand);
				DataSet dataSet = new DataSet();
				mySqlDataAdapter.Fill(dataSet);
				flag = (dataSet.Tables[0].Rows.Count > 0);
				if (flag)
				{
					try
					{
						IEnumerator enumerator = dataSet.Tables[0].Rows.GetEnumerator();
						while (enumerator.MoveNext())
						{
							DataRow dataRow = (DataRow)enumerator.Current;
							text = Conversions.ToString(dataRow["AS版本"]);
						}
					}
					finally
					{
						IEnumerator enumerator;
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
				mySqlConnection.Close();
			}
			catch (Exception expr_E5)
			{
				ProjectData.SetProjectError(expr_E5);
				mySqlConnection.Close();
				ProjectData.ClearProjectError();
			}
			this.Label1.Text = "最新版本：" + text;
			this.Button15.Enabled = true;
			flag = (Operators.CompareString(QJ全局声明.DQ当前版本, text, false) == 0);
			if (flag)
			{
				Interaction.MsgBox("已经是最新版本", MsgBoxStyle.Information, "信息");
			}
			else
			{
				Interaction.MsgBox("发现新版本！\r\n当前版本：" + QJ全局声明.DQ当前版本 + "\r\n最新版本：" + text, MsgBoxStyle.Information, "信息");
			}
		}

		public int HQ获取句柄(string 窗口标题)
		{
			string text = null;
			return ZJ主界面.FindWindow(ref text, ref 窗口标题);
		}

		public void QD启动线程_线程()
		{
			int num2;
			int num15;
			try
			{
				IL_01:
				int num = 1;
				bool flag = Operators.CompareString(QJ全局声明.FW服务器信息参数.BD绑定服, "是", false) == 0;
				if (!flag)
				{
					goto IL_48;
				}
				IL_22:
				num = 2;
				this.WG外挂名称 = QJ全局声明.FW服务器信息参数.WG外挂名;
				IL_35:
				num = 3;
				this.YX游戏名称 = QJ全局声明.FW服务器信息参数.YX游戏名;
				IL_48:
				IL_49:
				ProjectData.ClearProjectError();
				num2 = -2;
				IL_52:
				checked
				{
					int num5;
					bool flag2;
					while (true)
					{
						IL_3457:
						num = 7;
						if (this.gl账号管理list.CheckedItems.Count <= 0)
						{
							goto IL_3476;
						}
						IL_57:
						num = 8;
						int arg_6F_0 = 0;
						int num3 = this.gl账号管理list.Items.Count - 1;
						int num4 = arg_6F_0;
						while (true)
						{
							int arg_3451_0 = num4;
							num5 = num3;
							if (arg_3451_0 > num5)
							{
								break;
							}
							IL_75:
							num = 9;
							flag = this.gl账号管理list.GetItemChecked(num4);
							if (flag)
							{
								ZJ主界面.JB句柄参数 jB句柄参数;
								while (true)
								{
									IL_90:
									num = 10;
									flag = (Operators.CompareString(QJ全局声明.FW服务器信息参数.BD绑定服, "是", false) == 0);
									if (flag)
									{
										IL_B2:
										num = 11;
										this.wg外挂Text.Text = QJ全局声明.FW服务器信息参数.WG外挂名;
										IL_CC:
										num = 12;
										this.yx游戏Text.Text = QJ全局声明.FW服务器信息参数.YX游戏名;
										IL_E6:
										num = 13;
										this.WG外挂名称 = this.wg外挂Text.Text;
										IL_FB:
										num = 14;
										this.YX游戏名称 = this.yx游戏Text.Text;
									}
									IL_110:
									IL_111:
									num = 16;
									jB句柄参数.ZH账号 = Conversions.ToString(this.gl账号管理list.Items[num4]);
									IL_132:
									num = 17;
									ZJ主界面.JB句柄参数 jB句柄参数2;
									jB句柄参数2.ZH账号 = Conversions.ToString(this.gl账号管理list.Items[num4]);
									IL_153:
									num = 18;
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
									IL_18C:
									num = 19;
									this.XR写日志(Conversions.ToString(Operators.ConcatenateObject("正在（" + this.ComboBox4.Text + "）登录账号：", this.gl账号管理list.Items[num4])), Color.FromArgb(255, 255, 10), true);
									IL_1E5:
									num = 20;
									flag = MyProject.Computer.Keyboard.CapsLock;
									if (flag)
									{
										IL_1FE:
										num = 21;
										ZJ主界面.JP键盘按下(20, 0, 0, 0);
										IL_20D:
										num = 22;
										ZJ主界面.JP键盘按下(20, 0, 2, 0);
									}
									IL_21C:
									IL_21D:
									num = 24;
									this.cq重启错误次数 = 0;
									IL_22A:
									num = 25;
									flag = this.CheckBox4.Checked;
									string text;
									if (flag)
									{
										IL_242:
										num = 26;
										flag2 = (this.cq重启错误次数 >= 3);
										if (flag2)
										{
											goto IL_258;
										}
										IL_2CE:
										IL_2CF:
										num = 32;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：正在启动[ 认证 ]...", Color.FromArgb(150, 255, 0), true);
										IL_308:
										num = 33;
										this.DK打开外部地址(this.lj路径Text.Text);
										IL_31E:
										num = 34;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_341;
										}
										IL_348:
										num = 37;
										IL_34D:
										num = 38;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
										IL_36B:
										num = 40;
										flag2 = (this.HQ获取句柄(this.rz认证text.Text) == 0);
										if (!flag2)
										{
											IL_3A1:
											IL_3A2:
											num = 44;
											ZJ主界面.JB句柄参数 jB句柄参数3;
											jB句柄参数3.JB句柄 = unchecked((long)this.HQ获取句柄(this.rz认证text.Text));
											IL_3BF:
											num = 45;
											jB句柄参数3.BT标题 = this.HQ获取句柄标题(jB句柄参数3.JB句柄);
											IL_3D7:
											num = 46;
											this.cq重启错误次数 = 0;
											while (true)
											{
												IL_3E4:
												num = 47;
												flag2 = (this.cq重启错误次数 >= 10);
												if (flag2)
												{
													goto IL_3FB;
												}
												IL_471:
												IL_472:
												num = 53;
												_ZH主函数 arg_498_0 = this.CongDLL;
												int arg_498_1 = (int)this.ZX找寻句柄(jB句柄参数3.JB句柄, "登入");
												text = "send";
												arg_498_0.MN模拟后台按下(arg_498_1, ref text);
												IL_49E:
												num = 54;
												this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：正在启动[ 外挂 ]...", Color.FromArgb(150, 255, 0), true);
												IL_4D7:
												num = 55;
												flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
												if (flag2)
												{
													goto IL_4FA;
												}
												IL_501:
												num = 58;
												IL_506:
												num = 59;
												Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
												IL_524:
												num = 61;
												flag2 = (this.HQ获取句柄(this.WG外挂名称) == 0);
												if (!flag2)
												{
													break;
												}
												IL_53D:
												num = 62;
												this.cq重启错误次数 += 1;
												IL_550:;
											}
											IL_555:
											IL_556:
											goto IL_6C5;
										}
										IL_389:
										num = 41;
										this.cq重启错误次数 += 1;
										IL_39C:;
									}
									else
									{
										IL_55B:
										IL_55C:
										num = 67;
										this.cq重启错误次数 = 0;
									}
									while (true)
									{
										IL_569:
										num = 68;
										flag2 = (this.cq重启错误次数 >= 3);
										if (flag2)
										{
											goto IL_57F;
										}
										IL_5F5:
										IL_5F6:
										num = 74;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：正在启动[ 外挂 ]...", Color.FromArgb(150, 255, 0), true);
										IL_62F:
										num = 75;
										this.DK打开外部地址(this.lj路径Text.Text);
										IL_645:
										num = 76;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_668;
										}
										IL_66F:
										num = 79;
										IL_674:
										num = 80;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
										IL_692:
										num = 82;
										flag2 = (this.HQ获取句柄(this.WG外挂名称) == 0);
										if (!flag2)
										{
											break;
										}
										IL_6AB:
										num = 83;
										this.cq重启错误次数 += 1;
										IL_6BE:;
									}
									IL_6C3:
									IL_6C5:
									IL_6C6:
									num = 86;
									jB句柄参数.JB句柄 = unchecked((long)this.HQ获取句柄(this.WG外挂名称));
									IL_6DE:
									num = 87;
									jB句柄参数.BT标题 = this.HQ获取句柄标题(jB句柄参数.JB句柄);
									IL_6F6:
									num = 88;
									this.cq重启错误次数 = 0;
									while (true)
									{
										IL_703:
										num = 89;
										flag2 = (this.cq重启错误次数 >= 3);
										if (flag2)
										{
											goto IL_719;
										}
										IL_78F:
										IL_790:
										num = 95;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：正在启动[ 游戏 ]...", Color.FromArgb(150, 255, 0), true);
										IL_7C9:
										num = 96;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_7EC;
										}
										IL_7F3:
										num = 99;
										IL_7F8:
										num = 100;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 100f))));
										IL_816:
										num = 102;
										_ZH主函数 arg_83C_0 = this.CongDLL;
										int arg_83C_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "激活石器");
										text = "Pos";
										arg_83C_0.MN模拟后台按下(arg_83C_1, ref text);
										IL_842:
										num = 103;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_865;
										}
										IL_86C:
										num = 106;
										IL_871:
										num = 107;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 5000f))));
										IL_88F:
										num = 109;
										flag2 = (this.HQ获取句柄(this.YX游戏名称) == 0);
										if (!flag2)
										{
											break;
										}
										IL_8A8:
										num = 110;
										this.cq重启错误次数 += 1;
										IL_8BB:;
									}
									IL_8C0:
									IL_8C1:
									num = 113;
									jB句柄参数2.JB句柄 = unchecked((long)this.HQ获取句柄(this.YX游戏名称));
									IL_8D9:
									num = 114;
									jB句柄参数2.BT标题 = this.HQ获取句柄标题(jB句柄参数2.JB句柄);
									IL_8F3:
									num = 115;
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：正在登录账号...", Color.FromArgb(150, 255, 0), true);
									IL_92C:
									num = 116;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_94F;
									}
									IL_956:
									num = 119;
									IL_95B:
									num = 120;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 10f))));
									IL_979:
									num = 122;
									int arg_99B_0 = 1;
									int num6 = Strings.Len(RuntimeHelpers.GetObjectValue(this.gl账号管理list.Items[num4]));
									int num7 = arg_99B_0;
									int num8;
									while (true)
									{
										int arg_A50_0 = num7;
										num5 = num6;
										if (arg_A50_0 > num5)
										{
											break;
										}
										IL_9A2:
										num = 123;
										_ZH主函数 arg_9DA_0 = this.CongDLL;
										num8 = (int)jB句柄参数2.JB句柄;
										text = Strings.Mid(Conversions.ToString(this.gl账号管理list.Items[num4]), num7, 1);
										arg_9DA_0.MN模拟单字输入_后台(ref num8, ref text);
										jB句柄参数2.JB句柄 = unchecked((long)num8);
										IL_9EA:
										num = 124;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_A0D;
										}
										IL_A14:
										num = 127;
										IL_A19:
										num = 128;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 50f))));
										IL_A3A:
										num = 130;
										num7++;
									}
									IL_A55:
									num = 131;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_A7B;
									}
									IL_A82:
									num = 134;
									IL_A8A:
									num = 135;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 10f))));
									IL_AAB:
									num = 137;
									_ZH主函数 arg_ACA_0 = this.CongDLL;
									num8 = (int)jB句柄参数2.JB句柄;
									int num9 = 13;
									arg_ACA_0.MN模拟按下键盘_后台(ref num8, ref num9);
									jB句柄参数2.JB句柄 = unchecked((long)num8);
									IL_ADA:
									num = 138;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_B00;
									}
									IL_B07:
									num = 141;
									IL_B0F:
									num = 142;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 10f))));
									IL_B30:
									num = 144;
									int arg_B55_0 = 1;
									int num10 = Strings.Len(RuntimeHelpers.GetObjectValue(this.mm密码list.Items[num4]));
									int num11 = arg_B55_0;
									while (true)
									{
										int arg_C13_0 = num11;
										num5 = num10;
										if (arg_C13_0 > num5)
										{
											break;
										}
										IL_B5C:
										num = 145;
										_ZH主函数 arg_B97_0 = this.CongDLL;
										num9 = (int)jB句柄参数2.JB句柄;
										text = Strings.Mid(Conversions.ToString(this.mm密码list.Items[num4]), num11, 1);
										arg_B97_0.MN模拟单字输入_后台(ref num9, ref text);
										jB句柄参数2.JB句柄 = unchecked((long)num9);
										IL_BA7:
										num = 146;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_BCD;
										}
										IL_BD4:
										num = 149;
										IL_BDC:
										num = 150;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 50f))));
										IL_BFD:
										num = 152;
										num11++;
									}
									IL_C18:
									num = 153;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_C3E;
									}
									IL_C45:
									num = 156;
									IL_C4D:
									num = 157;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 500f))));
									IL_C6E:
									IL_C70:
									num = 159;
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：正在设置主机...", Color.FromArgb(150, 255, 0), true);
									IL_CAC:
									num = 160;
									_ZH主函数 arg_CF9_0 = this.CongDLL;
									int arg_CF9_1 = (int)this.JB句柄定位(this.JB句柄定位(this.JB句柄定位(jB句柄参数.JB句柄, 8L), 2L), 14L);
									short arg_CF9_2 = Conversions.ToShort(this.zj主机list.Items[num4]);
									text = "Pos";
									arg_CF9_0.SZ设置下拉框位置(arg_CF9_1, arg_CF9_2, ref text);
									IL_CFF:
									num = 161;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_D25;
									}
									IL_D2C:
									num = 164;
									IL_D34:
									num = 165;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 100f))));
									IL_D55:
									num = 167;
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：正在设置服务器...", Color.FromArgb(150, 255, 0), true);
									IL_D91:
									num = 168;
									_ZH主函数 arg_DDE_0 = this.CongDLL;
									int arg_DDE_1 = (int)this.JB句柄定位(this.JB句柄定位(this.JB句柄定位(jB句柄参数.JB句柄, 8L), 2L), 15L);
									short arg_DDE_2 = Conversions.ToShort(this.fj副机list.Items[num4]);
									text = "Pos";
									arg_DDE_0.SZ设置下拉框位置(arg_DDE_1, arg_DDE_2, ref text);
									IL_DE4:
									num = 169;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_E0A;
									}
									IL_E11:
									num = 172;
									IL_E19:
									num = 173;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 100f))));
									IL_E3A:
									num = 175;
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：正在设置人物...", Color.FromArgb(150, 255, 0), true);
									IL_E76:
									num = 176;
									_ZH主函数 arg_EC3_0 = this.CongDLL;
									int arg_EC3_1 = (int)this.JB句柄定位(this.JB句柄定位(this.JB句柄定位(jB句柄参数.JB句柄, 8L), 2L), 16L);
									short arg_EC3_2 = Conversions.ToShort(this.rw人物list.Items[num4]);
									text = "Pos";
									arg_EC3_0.SZ设置下拉框位置(arg_EC3_1, arg_EC3_2, ref text);
									IL_EC9:
									num = 177;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_EEF;
									}
									IL_EF6:
									num = 180;
									IL_EFE:
									num = 181;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 100f))));
									IL_F1F:
									IL_F21:
									num = 183;
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：正在配置角色...", Color.FromArgb(150, 255, 0), true);
									IL_F5D:
									num = 184;
									flag2 = (Operators.CompareString(Strings.Trim(Conversions.ToString(this.pz配置list.Items[num4])), "不读取", false) != 0);
									if (flag2)
									{
										IL_F99:
										num = 185;
										flag = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag)
										{
											goto IL_FBF;
										}
										IL_FC6:
										num = 188;
										IL_FCE:
										num = 189;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 50f))));
										IL_FEF:
										num = 191;
										_ZH主函数 arg_1018_0 = this.CongDLL;
										int arg_1018_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "取");
										text = "Pos";
										arg_1018_0.MN模拟后台按下(arg_1018_1, ref text);
										IL_101E:
										num = 192;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_1044;
										}
										IL_104B:
										num = 195;
										IL_1053:
										num = 196;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 500f))));
										IL_1074:
										num = 198;
										IntPtr arg_10B1_0 = (IntPtr)this.JB句柄定位(unchecked((long)this.HQ获取句柄("提取设置文件")), 8L);
										int arg_10B1_1 = 12;
										int arg_10B1_2 = 0;
										text = Conversions.ToString(this.pz配置list.Items[num4]);
										ZJ主界面.FS发送信息(arg_10B1_0, arg_10B1_1, arg_10B1_2, ref text);
										IL_10B7:
										num = 199;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_10DD;
										}
										IL_10E4:
										num = 202;
										IL_10EC:
										num = 203;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 200f))));
										IL_110D:
										num = 205;
										_ZH主函数 arg_113B_0 = this.CongDLL;
										int arg_113B_1 = (int)this.ZX找寻句柄(unchecked((long)this.HQ获取句柄("提取设置文件")), "打开(&O)");
										text = "Pos";
										arg_113B_0.MN模拟后台按下(arg_113B_1, ref text);
										IL_1141:
										num = 206;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_1167;
										}
										IL_116E:
										num = 209;
										IL_1176:
										num = 210;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 200f))));
										IL_1197:
										num = 212;
										SendKeys.SendWait("{Esc}");
										IL_11A9:
										num = 213;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_11CF;
										}
										IL_11D6:
										num = 216;
										IL_11DE:
										num = 217;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 200f))));
										IL_11FF:
										num = 219;
										SendKeys.SendWait("{Esc}");
									}
									IL_1211:
									IL_1214:
									num = 221;
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：正在登入游戏...", Color.FromArgb(150, 255, 0), true);
									IL_1250:
									num = 222;
									_ZH主函数 arg_127A_0 = this.CongDLL;
									int arg_127A_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "自动登陆");
									byte arg_127A_2 = 1;
									text = "Pos";
									arg_127A_0.SZ设置复选框(arg_127A_1, arg_127A_2, ref text);
									IL_1280:
									num = 223;
									int num12 = 0;
									while (true)
									{
										IL_128B:
										num = 224;
										flag2 = (num12 >= 200);
										if (flag2)
										{
											break;
										}
										IL_1338:
										IL_1339:
										num = 231;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_135F;
										}
										IL_1366:
										num = 234;
										IL_136E:
										num = 235;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 100f))));
										IL_138F:
										num = 237;
										num12++;
										IL_139A:
										num = 238;
										flag2 = (Strings.InStr(this.HQ获取句柄标题(jB句柄参数2.JB句柄), "LV", CompareMethod.Binary) == 0);
										if (!flag2)
										{
											goto IL_13C9;
										}
										IL_13C2:;
									}
									IL_12A6:
									num = 225;
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
									IL_12E2:
									num = 226;
									this.XR写日志("进入游戏超时，重新启动！", Color.FromArgb(255, 255, 10), true);
									IL_1307:
									num = 227;
									this.GB关闭程序((int)jB句柄参数.JB句柄);
									IL_131D:
									num = 228;
									this.GB关闭程序((int)jB句柄参数2.JB句柄);
									IL_1333:
									continue;
									IL_13C9:
									num = 241;
									IL_13D1:
									num = 242;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1000f))));
									IL_13F2:
									num = 244;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_1418;
									}
									IL_141F:
									num = 247;
									IL_1427:
									num = 248;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 50f))));
									IL_1448:
									num = 250;
									_ZH主函数 arg_1471_0 = this.CongDLL;
									int arg_1471_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "脚本");
									text = "Pos";
									arg_1471_0.MN模拟后台按下(arg_1471_1, ref text);
									IL_1479:
									num = 251;
									unchecked
									{
										IntPtr arg_14C0_0 = (IntPtr)this.ZX找寻句柄((long)this.HQ获取句柄(Conversions.ToString(jB句柄参数.JB句柄)), "官方网站");
										int arg_14C0_1 = 12;
										int arg_14C0_2 = 0;
										text = Conversions.ToString(this.js角色list.Items[num4]);
										ZJ主界面.FS发送信息(arg_14C0_0, arg_14C0_1, arg_14C0_2, ref text);
										IL_14C6:
										num = 252;
										IntPtr arg_1503_0 = (IntPtr)this.ZX找寻句柄((long)this.HQ获取句柄(Conversions.ToString(jB句柄参数.JB句柄)), "最大音量");
										int arg_1503_1 = 12;
										int arg_1503_2 = 0;
										text = Conversions.ToString(jB句柄参数2.JB句柄);
										ZJ主界面.FS发送信息(arg_1503_0, arg_1503_1, arg_1503_2, ref text);
										IL_150B:
										num = 253;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
										IL_1547:
										num = 254;
										this.XR写日志("外挂性能参数设置", Color.FromArgb(255, 255, 10), true);
										IL_156C:
										num = 255;
										flag2 = this.checkb1.Checked;
									}
									if (flag2)
									{
										IL_1587:
										num = 256;
										_ZH主函数 arg_15B7_0 = this.CongDLL;
										int arg_15B7_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb1.Text);
										byte arg_15B7_2 = 1;
										text = "Pos";
										arg_15B7_0.SZ设置复选框(arg_15B7_1, arg_15B7_2, ref text);
										IL_15BD:
										num = 257;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb1.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_1609:;
									}
									else
									{
										IL_160E:
										num = 259;
										IL_1616:
										num = 260;
										_ZH主函数 arg_1646_0 = this.CongDLL;
										int arg_1646_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb1.Text);
										byte arg_1646_2 = 0;
										text = "Pos";
										arg_1646_0.SZ设置复选框(arg_1646_1, arg_1646_2, ref text);
										IL_164C:
										num = 261;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb1.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_1698:
									IL_1699:
									num = 263;
									flag2 = this.checkb2.Checked;
									if (flag2)
									{
										IL_16B4:
										num = 264;
										_ZH主函数 arg_16E4_0 = this.CongDLL;
										int arg_16E4_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb2.Text);
										byte arg_16E4_2 = 1;
										text = "Pos";
										arg_16E4_0.SZ设置复选框(arg_16E4_1, arg_16E4_2, ref text);
										IL_16EA:
										num = 265;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb2.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_1736:;
									}
									else
									{
										IL_173B:
										num = 267;
										IL_1743:
										num = 268;
										_ZH主函数 arg_1773_0 = this.CongDLL;
										int arg_1773_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb2.Text);
										byte arg_1773_2 = 0;
										text = "Pos";
										arg_1773_0.SZ设置复选框(arg_1773_1, arg_1773_2, ref text);
										IL_1779:
										num = 269;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb2.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_17C5:
									IL_17C6:
									num = 271;
									flag2 = this.checkb3.Checked;
									if (flag2)
									{
										IL_17E1:
										num = 272;
										_ZH主函数 arg_1811_0 = this.CongDLL;
										int arg_1811_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb3.Text);
										byte arg_1811_2 = 1;
										text = "Pos";
										arg_1811_0.SZ设置复选框(arg_1811_1, arg_1811_2, ref text);
										IL_1817:
										num = 273;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb3.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_1863:;
									}
									else
									{
										IL_1868:
										num = 275;
										IL_1870:
										num = 276;
										_ZH主函数 arg_18A0_0 = this.CongDLL;
										int arg_18A0_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb3.Text);
										byte arg_18A0_2 = 0;
										text = "Pos";
										arg_18A0_0.SZ设置复选框(arg_18A0_1, arg_18A0_2, ref text);
										IL_18A6:
										num = 277;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb3.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_18F2:
									IL_18F3:
									num = 279;
									flag2 = this.checkb7.Checked;
									if (flag2)
									{
										IL_190E:
										num = 280;
										_ZH主函数 arg_193E_0 = this.CongDLL;
										int arg_193E_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb7.Text);
										byte arg_193E_2 = 1;
										text = "Pos";
										arg_193E_0.SZ设置复选框(arg_193E_1, arg_193E_2, ref text);
										IL_1944:
										num = 281;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb7.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_1990:;
									}
									else
									{
										IL_1995:
										num = 283;
										IL_199D:
										num = 284;
										_ZH主函数 arg_19CD_0 = this.CongDLL;
										int arg_19CD_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb7.Text);
										byte arg_19CD_2 = 0;
										text = "Pos";
										arg_19CD_0.SZ设置复选框(arg_19CD_1, arg_19CD_2, ref text);
										IL_19D3:
										num = 285;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb7.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_1A1F:
									IL_1A20:
									num = 287;
									flag2 = this.checkb8.Checked;
									if (flag2)
									{
										IL_1A3B:
										num = 288;
										_ZH主函数 arg_1A6B_0 = this.CongDLL;
										int arg_1A6B_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb8.Text);
										byte arg_1A6B_2 = 1;
										text = "Pos";
										arg_1A6B_0.SZ设置复选框(arg_1A6B_1, arg_1A6B_2, ref text);
										IL_1A71:
										num = 289;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb8.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_1ABD:;
									}
									else
									{
										IL_1AC2:
										num = 291;
										IL_1ACA:
										num = 292;
										_ZH主函数 arg_1AFA_0 = this.CongDLL;
										int arg_1AFA_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb8.Text);
										byte arg_1AFA_2 = 0;
										text = "Pos";
										arg_1AFA_0.SZ设置复选框(arg_1AFA_1, arg_1AFA_2, ref text);
										IL_1B00:
										num = 293;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb8.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_1B4C:
									IL_1B4D:
									num = 295;
									flag2 = this.checkb9.Checked;
									if (flag2)
									{
										IL_1B68:
										num = 296;
										_ZH主函数 arg_1B98_0 = this.CongDLL;
										int arg_1B98_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb9.Text);
										byte arg_1B98_2 = 1;
										text = "Pos";
										arg_1B98_0.SZ设置复选框(arg_1B98_1, arg_1B98_2, ref text);
										IL_1B9E:
										num = 297;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb9.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_1BEA:;
									}
									else
									{
										IL_1BEF:
										num = 299;
										IL_1BF7:
										num = 300;
										_ZH主函数 arg_1C27_0 = this.CongDLL;
										int arg_1C27_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb9.Text);
										byte arg_1C27_2 = 0;
										text = "Pos";
										arg_1C27_0.SZ设置复选框(arg_1C27_1, arg_1C27_2, ref text);
										IL_1C2D:
										num = 301;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb9.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_1C79:
									IL_1C7C:
									num = 303;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_1CA2;
									}
									IL_1CA9:
									num = 306;
									IL_1CB1:
									num = 307;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 5000f))));
									IL_1CD2:
									num = 309;
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
									IL_1D0E:
									num = 310;
									this.XR写日志("外挂功能参数设置", Color.FromArgb(255, 255, 10), true);
									IL_1D33:
									num = 311;
									flag2 = this.checkb4.Checked;
									if (flag2)
									{
										IL_1D4E:
										num = 312;
										_ZH主函数 arg_1D7E_0 = this.CongDLL;
										int arg_1D7E_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb4.Text);
										byte arg_1D7E_2 = 1;
										text = "Pos";
										arg_1D7E_0.SZ设置复选框(arg_1D7E_1, arg_1D7E_2, ref text);
										IL_1D84:
										num = 313;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb4.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_1DD0:;
									}
									else
									{
										IL_1DD5:
										num = 315;
										IL_1DDD:
										num = 316;
										_ZH主函数 arg_1E0D_0 = this.CongDLL;
										int arg_1E0D_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb4.Text);
										byte arg_1E0D_2 = 0;
										text = "Pos";
										arg_1E0D_0.SZ设置复选框(arg_1E0D_1, arg_1E0D_2, ref text);
										IL_1E13:
										num = 317;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb4.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_1E5F:
									IL_1E60:
									num = 319;
									flag2 = this.checkb5.Checked;
									if (flag2)
									{
										IL_1E7B:
										num = 320;
										_ZH主函数 arg_1EAB_0 = this.CongDLL;
										int arg_1EAB_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb5.Text);
										byte arg_1EAB_2 = 1;
										text = "Pos";
										arg_1EAB_0.SZ设置复选框(arg_1EAB_1, arg_1EAB_2, ref text);
										IL_1EB1:
										num = 321;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb5.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_1EFD:;
									}
									else
									{
										IL_1F02:
										num = 323;
										IL_1F0A:
										num = 324;
										_ZH主函数 arg_1F3A_0 = this.CongDLL;
										int arg_1F3A_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb5.Text);
										byte arg_1F3A_2 = 0;
										text = "Pos";
										arg_1F3A_0.SZ设置复选框(arg_1F3A_1, arg_1F3A_2, ref text);
										IL_1F40:
										num = 325;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb5.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_1F8C:
									IL_1F8D:
									num = 327;
									flag2 = this.checkb13.Checked;
									if (flag2)
									{
										IL_1FA8:
										num = 328;
										_ZH主函数 arg_1FD8_0 = this.CongDLL;
										int arg_1FD8_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb13.Text);
										byte arg_1FD8_2 = 1;
										text = "Pos";
										arg_1FD8_0.SZ设置复选框(arg_1FD8_1, arg_1FD8_2, ref text);
										IL_1FDE:
										num = 329;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb13.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_202A:;
									}
									else
									{
										IL_202F:
										num = 331;
										IL_2037:
										num = 332;
										_ZH主函数 arg_2067_0 = this.CongDLL;
										int arg_2067_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb13.Text);
										byte arg_2067_2 = 0;
										text = "Pos";
										arg_2067_0.SZ设置复选框(arg_2067_1, arg_2067_2, ref text);
										IL_206D:
										num = 333;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb13.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_20B9:
									IL_20BA:
									num = 335;
									flag2 = this.checkb14.Checked;
									if (flag2)
									{
										IL_20D5:
										num = 336;
										_ZH主函数 arg_2105_0 = this.CongDLL;
										int arg_2105_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb14.Text);
										byte arg_2105_2 = 1;
										text = "Pos";
										arg_2105_0.SZ设置复选框(arg_2105_1, arg_2105_2, ref text);
										IL_210B:
										num = 337;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb14.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_2157:;
									}
									else
									{
										IL_215C:
										num = 339;
										IL_2164:
										num = 340;
										_ZH主函数 arg_2194_0 = this.CongDLL;
										int arg_2194_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, this.checkb14.Text);
										byte arg_2194_2 = 0;
										text = "Pos";
										arg_2194_0.SZ设置复选框(arg_2194_1, arg_2194_2, ref text);
										IL_219A:
										num = 341;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb14.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_21E6:
									IL_21E7:
									num = 343;
									flag2 = this.checkb6.Checked;
									if (flag2)
									{
										IL_2202:
										num = 344;
										flag = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag)
										{
											goto IL_2228;
										}
										IL_222F:
										num = 347;
										IL_2237:
										num = 348;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
										IL_2258:
										num = 350;
										flag2 = (Operators.CompareString(this.CongDLL.HQ获取复选框状态((int)this.ZX找寻句柄(jB句柄参数.JB句柄, "决斗")), "0", false) == 0);
										if (flag2)
										{
											IL_2291:
											num = 351;
											_ZH主函数 arg_22BA_0 = this.CongDLL;
											int arg_22BA_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "决斗");
											text = "Pos";
											arg_22BA_0.MN模拟后台按下(arg_22BA_1, ref text);
										}
										IL_22C0:
										IL_22C1:
										num = 353;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb6.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_230D:;
									}
									else
									{
										IL_2312:
										num = 355;
										IL_231A:
										num = 356;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_2340;
										}
										IL_2347:
										num = 359;
										IL_234F:
										num = 360;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
										IL_2370:
										num = 362;
										flag2 = (Operators.CompareString(this.CongDLL.HQ获取复选框状态((int)this.ZX找寻句柄(jB句柄参数.JB句柄, "决斗")), "1", false) == 0);
										if (flag2)
										{
											IL_23A9:
											num = 363;
											_ZH主函数 arg_23D2_0 = this.CongDLL;
											int arg_23D2_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "决斗");
											text = "Pos";
											arg_23D2_0.MN模拟后台按下(arg_23D2_1, ref text);
										}
										IL_23D8:
										IL_23D9:
										num = 365;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb6.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_2425:
									IL_2426:
									num = 367;
									flag2 = this.checkb10.Checked;
									if (flag2)
									{
										IL_2441:
										num = 368;
										flag = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag)
										{
											goto IL_2467;
										}
										IL_246E:
										num = 371;
										IL_2476:
										num = 372;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
										IL_2497:
										num = 374;
										flag2 = (Operators.CompareString(this.CongDLL.HQ获取复选框状态((int)this.ZX找寻句柄(jB句柄参数.JB句柄, "组队")), "0", false) == 0);
										if (flag2)
										{
											IL_24D0:
											num = 375;
											_ZH主函数 arg_24F9_0 = this.CongDLL;
											int arg_24F9_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "组队");
											text = "Pos";
											arg_24F9_0.MN模拟后台按下(arg_24F9_1, ref text);
										}
										IL_24FF:
										IL_2500:
										num = 377;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb10.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_254C:;
									}
									else
									{
										IL_2551:
										num = 379;
										IL_2559:
										num = 380;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_257F;
										}
										IL_2586:
										num = 383;
										IL_258E:
										num = 384;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
										IL_25AF:
										num = 386;
										flag2 = (Operators.CompareString(this.CongDLL.HQ获取复选框状态((int)this.ZX找寻句柄(jB句柄参数.JB句柄, "组队")), "1", false) == 0);
										if (flag2)
										{
											IL_25E8:
											num = 387;
											_ZH主函数 arg_2611_0 = this.CongDLL;
											int arg_2611_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "组队");
											text = "Pos";
											arg_2611_0.MN模拟后台按下(arg_2611_1, ref text);
										}
										IL_2617:
										IL_2618:
										num = 389;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb10.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_2664:
									IL_2665:
									num = 391;
									flag2 = this.checkb11.Checked;
									if (flag2)
									{
										IL_2680:
										num = 392;
										flag = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag)
										{
											goto IL_26A6;
										}
										IL_26AD:
										num = 395;
										IL_26B5:
										num = 396;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
										IL_26D6:
										num = 398;
										flag2 = (Operators.CompareString(this.CongDLL.HQ获取复选框状态((int)this.ZX找寻句柄(jB句柄参数.JB句柄, "名片")), "0", false) == 0);
										if (flag2)
										{
											IL_270F:
											num = 399;
											_ZH主函数 arg_2738_0 = this.CongDLL;
											int arg_2738_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "名片");
											text = "Pos";
											arg_2738_0.MN模拟后台按下(arg_2738_1, ref text);
										}
										IL_273E:
										IL_273F:
										num = 401;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb11.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_278B:;
									}
									else
									{
										IL_2790:
										num = 403;
										IL_2798:
										num = 404;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_27BE;
										}
										IL_27C5:
										num = 407;
										IL_27CD:
										num = 408;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
										IL_27EE:
										num = 410;
										flag2 = (Operators.CompareString(this.CongDLL.HQ获取复选框状态((int)this.ZX找寻句柄(jB句柄参数.JB句柄, "名片")), "1", false) == 0);
										if (flag2)
										{
											IL_2827:
											num = 411;
											_ZH主函数 arg_2850_0 = this.CongDLL;
											int arg_2850_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "名片");
											text = "Pos";
											arg_2850_0.MN模拟后台按下(arg_2850_1, ref text);
										}
										IL_2856:
										IL_2857:
										num = 413;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb11.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_28A3:
									IL_28A4:
									num = 415;
									flag2 = this.checkb12.Checked;
									if (flag2)
									{
										IL_28BF:
										num = 416;
										flag = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag)
										{
											goto IL_28E5;
										}
										IL_28EC:
										num = 419;
										IL_28F4:
										num = 420;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
										IL_2915:
										num = 422;
										flag2 = (Operators.CompareString(this.CongDLL.HQ获取复选框状态((int)this.ZX找寻句柄(jB句柄参数.JB句柄, "交易")), "0", false) == 0);
										if (flag2)
										{
											IL_294E:
											num = 423;
											_ZH主函数 arg_2977_0 = this.CongDLL;
											int arg_2977_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "交易");
											text = "Pos";
											arg_2977_0.MN模拟后台按下(arg_2977_1, ref text);
										}
										IL_297D:
										IL_297E:
										num = 425;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb12.Text + " - 开启", Color.FromArgb(150, 255, 0), true);
										IL_29CA:;
									}
									else
									{
										IL_29CF:
										num = 427;
										IL_29D7:
										num = 428;
										flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag2)
										{
											goto IL_29FD;
										}
										IL_2A04:
										num = 431;
										IL_2A0C:
										num = 432;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
										IL_2A2D:
										num = 434;
										flag2 = (Operators.CompareString(this.CongDLL.HQ获取复选框状态((int)this.ZX找寻句柄(jB句柄参数.JB句柄, "交易")), "1", false) == 0);
										if (flag2)
										{
											IL_2A66:
											num = 435;
											_ZH主函数 arg_2A8F_0 = this.CongDLL;
											int arg_2A8F_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "交易");
											text = "Pos";
											arg_2A8F_0.MN模拟后台按下(arg_2A8F_1, ref text);
										}
										IL_2A95:
										IL_2A96:
										num = 437;
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：" + this.checkb12.Text + " - 关闭", Color.FromArgb(150, 255, 0), true);
									}
									IL_2AE2:
									IL_2AE5:
									num = 439;
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：正在设置脚本...", Color.FromArgb(150, 255, 0), true);
									IL_2B21:
									num = 440;
									flag2 = (Operators.CompareString(Strings.Trim(Conversions.ToString(this.jb脚本list.Items[num4])), "不启动", false) != 0);
									if (flag2)
									{
										IL_2B5D:
										num = 441;
										flag = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
										if (flag)
										{
											goto IL_2B83;
										}
										IL_2B8A:
										num = 444;
										IL_2B92:
										num = 445;
										Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 3000f))));
										IL_2BB3:
										num = 447;
										int num13 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "TreeViewWndClass", "");
										IL_2BD4:
										num = 448;
										flag2 = (num13 == 0);
										if (flag2)
										{
											IL_2BE6:
											IL_2F81:
											num = 492;
											this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
											IL_2FBD:
											num = 493;
											this.XR写日志("脚本读取失败！", Color.FromArgb(255, 0, 0), true);
											IL_2FDD:
											num = 494;
											flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
											if (flag2)
											{
												goto IL_3003;
											}
											IL_300A:
											num = 497;
											IL_3012:
											num = 498;
											Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 3000f))));
											IL_3033:;
										}
										else
										{
											IL_2BEB:
											num = 451;
											ZH主函数 zH主函数 = new ZH主函数Class();
											IL_2BF9:
											num = 452;
											string right = "9@9@27485203";
											while (true)
											{
												IL_2C09:
												num = 453;
												flag2 = (Operators.CompareString(Strings.Left(zH主函数.HQ获取树节点名称(num13), Strings.InStr(zH主函数.HQ获取树节点名称(num13), "\0", CompareMethod.Binary) - 1), right, false) == 0);
												if (flag2)
												{
													break;
												}
												IL_2D20:
												num = 459;
												IL_2D28:
												num = 460;
												right = Strings.Left(zH主函数.HQ获取树节点名称(num13), Strings.InStr(zH主函数.HQ获取树节点名称(num13), "\0", CompareMethod.Binary) - 1);
												IL_2D55:
												num = 461;
												flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
												if (flag2)
												{
													goto IL_2D7B;
												}
												IL_2D82:
												num = 464;
												IL_2D8A:
												num = 465;
												Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 10f))));
												IL_2DAB:
												num = 467;
												_ZH主函数 arg_2DC0_0 = this.CongDLL;
												num9 = 40;
												arg_2DC0_0.MN模拟按下键盘_后台(ref num13, ref num9);
												IL_2DC6:
												num = 468;
												flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
												if (flag2)
												{
													goto IL_2DEC;
												}
												IL_2DF3:
												num = 471;
												IL_2DFB:
												num = 472;
												Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 10f))));
												IL_2E1C:
												num = 474;
												flag2 = Operators.ConditionalCompareObjectNotEqual(Strings.Left(zH主函数.HQ获取树节点名称(num13), Strings.InStr(zH主函数.HQ获取树节点名称(num13), "\0", CompareMethod.Binary) - 1), this.jb脚本list.Items[num4], false);
												if (!flag2)
												{
													goto IL_2E6E;
												}
												IL_2E64:;
											}
											IL_2C48:
											num = 454;
											this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
											IL_2C84:
											num = 455;
											this.XR写日志(Conversions.ToString(Operators.ConcatenateObject("没有找到脚本：", this.jb脚本list.Items[num4])), Color.FromArgb(255, 0, 0), true);
											IL_2CBF:
											num = 456;
											this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
											IL_2CFB:
											num = 457;
											this.XR写日志("无法启动脚本！", Color.FromArgb(255, 0, 0), true);
											IL_2D1B:
											IL_2F78:
											goto IL_2F79;
											IL_2E6E:
											num = 477;
											IL_2E76:
											num = 478;
											this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
											IL_2EB2:
											num = 479;
											this.XR写日志(Conversions.ToString(Operators.ConcatenateObject("脚本启动： ", this.jb脚本list.Items[num4])), Color.FromArgb(255, 0, 0), true);
											IL_2EED:
											num = 480;
											flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
											if (flag2)
											{
												goto IL_2F13;
											}
											IL_2F1A:
											num = 483;
											IL_2F22:
											num = 484;
											Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
											IL_2F43:
											num = 486;
											_ZH主函数 arg_2F6C_0 = this.CongDLL;
											int arg_2F6C_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "启动");
											text = "Pos";
											arg_2F6C_0.MN模拟后台按下(arg_2F6C_1, ref text);
											IL_2F72:;
										}
									}
									IL_3034:
									IL_3035:
									num = 500;
									IntPtr arg_307E_0 = (IntPtr)this.HQ获取句柄(this.YX游戏名称);
									int arg_307E_1 = 12;
									int arg_307E_2 = 0;
									text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("账号：", this.gl账号管理list.Items[num4]), " 监控中..."));
									ZJ主界面.FS发送信息(arg_307E_0, arg_307E_1, arg_307E_2, ref text);
									IL_3084:
									num = 501;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_30AA;
									}
									IL_30B1:
									num = 504;
									IL_30B9:
									num = 505;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 100f))));
									IL_30DA:
									num = 507;
									flag2 = (Operators.CompareString(jB句柄参数2.BT标题, this.HQ获取句柄标题(jB句柄参数2.JB句柄), false) != 0);
									if (flag2)
									{
										break;
									}
									IL_32BC:
									num = 527;
									IL_32C4:
									num = 528;
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
									IL_3300:
									num = 529;
									this.XR写日志(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("账号： ", this.gl账号管理list.Items[num4]), " 登录异常，重新登录！")), Color.FromArgb(255, 255, 10), true);
									IL_334A:
									num = 530;
									this.GB关闭程序((int)jB句柄参数2.JB句柄);
									IL_3360:
									num = 531;
									this.GB关闭程序((int)jB句柄参数.JB句柄);
									IL_3376:
									num = 532;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_339C;
									}
									IL_33A3:
									num = 535;
									IL_33AB:
									num = 536;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 500f))));
									IL_33CC:
									continue;
									IL_2F79:
									IL_2F7A:
									goto IL_3034;
								}
								IL_310A:
								num = 508;
								this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
								IL_3146:
								num = 509;
								this.XR写日志(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("账号： ", this.gl账号管理list.Items[num4]), " 登录完毕！")), Color.FromArgb(255, 255, 10), true);
								IL_3190:
								num = 510;
								flag2 = this.CheckBox3.Checked;
								if (flag2)
								{
									IL_31AB:
									num = 511;
									_ZH主函数 arg_31D5_0 = this.CongDLL;
									int arg_31D5_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "隐藏石器");
									byte arg_31D5_2 = 1;
									string text = "Pos";
									arg_31D5_0.SZ设置复选框(arg_31D5_1, arg_31D5_2, ref text);
									IL_31DB:
									num = 512;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_3201;
									}
									IL_3208:
									num = 515;
									IL_3210:
									num = 516;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 50f))));
									IL_3231:
									num = 518;
									_ZH主函数 arg_325A_0 = this.CongDLL;
									int arg_325A_1 = (int)this.ZX找寻句柄(jB句柄参数.JB句柄, "隐藏窗口");
									text = "Pos";
									arg_325A_0.MN模拟后台按下(arg_325A_1, ref text);
									IL_3260:
									num = 519;
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										goto IL_3286;
									}
									IL_328D:
									num = 522;
									IL_3295:
									num = 523;
									Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 500f))));
								}
								IL_32B6:
								IL_32B7:
								IL_33D1:
								IL_33D2:
								num = 540;
								this.gl账号管理list.SetItemChecked(num4, false);
								IL_33E7:
								num = 541;
								flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
								if (flag2)
								{
									goto IL_340D;
								}
								IL_3414:
								num = 544;
								IL_341C:
								num = 545;
								Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 1500f))));
							}
							IL_343D:
							IL_343E:
							num = 548;
							num4++;
						}
						IL_3456:;
					}
					IL_258:
					num = 27;
					this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
					IL_291:
					num = 28;
					this.XR写日志("重启错误次数超过上限，请检查参数设置！", Color.FromArgb(255, 255, 10), true);
					IL_2B3:
					num = 29;
					this.Button5.Text = "一键启动（F4）";
					IL_2C8:
					IL_341:
					goto IL_3544;
					IL_3FB:
					num = 48;
					this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
					IL_434:
					num = 49;
					this.XR写日志("重启错误次数超过上限，请检查参数设置！", Color.FromArgb(255, 255, 10), true);
					IL_456:
					num = 50;
					this.Button5.Text = "一键启动（F4）";
					IL_46B:
					IL_4FA:
					goto IL_3544;
					IL_57F:
					num = 69;
					this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
					IL_5B8:
					num = 70;
					this.XR写日志("重启错误次数超过上限，请检查参数设置！", Color.FromArgb(255, 255, 10), true);
					IL_5DA:
					num = 71;
					this.Button5.Text = "一键启动（F4）";
					IL_5EF:
					IL_668:
					goto IL_3544;
					IL_719:
					num = 90;
					this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
					IL_752:
					num = 91;
					this.XR写日志("重启错误次数超过上限，请检查参数设置！", Color.FromArgb(255, 255, 10), true);
					IL_774:
					num = 92;
					this.Button5.Text = "一键启动（F4）";
					IL_789:
					IL_7EC:
					IL_865:
					IL_94F:
					IL_A0D:
					IL_A7B:
					IL_B00:
					IL_BCD:
					IL_C3E:
					IL_D25:
					IL_E0A:
					IL_EEF:
					IL_FBF:
					IL_1044:
					IL_10DD:
					IL_1167:
					IL_11CF:
					IL_135F:
					IL_1418:
					IL_1CA2:
					IL_2228:
					IL_2340:
					IL_2467:
					IL_257F:
					IL_26A6:
					IL_27BE:
					IL_28E5:
					IL_29FD:
					IL_2B83:
					IL_2D7B:
					IL_2DEC:
					IL_2F13:
					IL_3003:
					IL_30AA:
					IL_3201:
					IL_3286:
					IL_339C:
					IL_340D:
					goto IL_3544;
					IL_3476:
					num = 550;
					this.Button5.Text = "一键启动（F4）";
					IL_348E:
					num = 551;
					this.Button11_Click(null, null);
					IL_349E:
					num = 552;
					flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
					if (!flag2)
					{
						goto IL_34D3;
					}
					IL_34C4:
					num = 553;
					this.HQ获取进程外挂数据(false);
					IL_34D3:
					num = 555;
					int num14 = 0;
					int arg_353B_0;
					do
					{
						IL_34DD:
						num = 556;
						flag2 = (this.HQ获取句柄(this.WG外挂名称) != 0);
						if (flag2)
						{
							IL_34FC:
							num = 557;
							this.GB关闭程序(this.HQ获取句柄(this.WG外挂名称));
							IL_3516:
							num = 558;
							Thread.Sleep(1);
						}
						IL_3524:
						IL_3525:
						num = 560;
						num14++;
						arg_353B_0 = num14;
						num5 = 20;
					}
					while (arg_353B_0 <= num5);
					IL_353D:
					IL_3544:
					IL_3545:
					goto IL_3E73;
					IL_346:
					goto IL_36B;
					IL_4FF:
					goto IL_524;
					IL_66D:
					goto IL_692;
					IL_7F1:
					goto IL_816;
					IL_86A:
					goto IL_88F;
					IL_954:
					goto IL_979;
					IL_A12:
					goto IL_A3A;
					IL_A80:
					goto IL_AAB;
					IL_B05:
					goto IL_B30;
					IL_BD2:
					goto IL_BFD;
					IL_C43:
					goto IL_C6E;
					IL_D2A:
					goto IL_D55;
					IL_E0F:
					goto IL_E3A;
					IL_EF4:
					goto IL_F1F;
					IL_FC4:
					goto IL_FEF;
					IL_1049:
					goto IL_1074;
					IL_10E2:
					goto IL_110D;
					IL_116C:
					goto IL_1197;
					IL_11D4:
					goto IL_11FF;
					IL_1364:
					goto IL_138F;
					IL_13C7:
					goto IL_13F2;
					IL_141D:
					goto IL_1448;
					IL_1CA7:
					goto IL_1CD2;
					IL_222D:
					goto IL_2258;
					IL_2345:
					goto IL_2370;
					IL_246C:
					goto IL_2497;
					IL_2584:
					goto IL_25AF;
					IL_26AB:
					goto IL_26D6;
					IL_27C3:
					goto IL_27EE;
					IL_28EA:
					goto IL_2915;
					IL_2A02:
					goto IL_2A2D;
					IL_2B88:
					goto IL_2BB3;
					IL_2D80:
					goto IL_2DAB;
					IL_2DF1:
					goto IL_2E1C;
					IL_2E69:
					goto IL_2F77;
					IL_2F18:
					goto IL_2F43;
					IL_2F77:
					IL_3008:
					goto IL_3033;
					IL_30AF:
					goto IL_30DA;
					IL_3206:
					goto IL_3231;
					IL_328B:
					goto IL_32B6;
					IL_33A1:
					goto IL_33CC;
					IL_3412:
					goto IL_343D;
					IL_354E:;
				}
				int arg_3555_0 = num15 + 1;
				num15 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_3555_0);
				IL_3E26:
				goto IL_3E68;
				num15 = num;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num2 > -2) ? num2 : 1);
				IL_3E44:
				goto IL_3E68;
			}
			object arg_3E46_0;
			endfilter(arg_3E46_0 is Exception & num2 != 0 & num15 == 0);
			IL_3E68:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_3E73:
			if (num15 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void pz配置Text_TextChanged(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(Strings.Trim(this.pz配置Text.Text), "", false) == 0;
			if (flag)
			{
				this.pz配置Text.Text = "不读取";
			}
		}

		private void jb脚本Text_TextChanged(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(Strings.Trim(this.jb脚本Text.Text), "", false) == 0;
			if (flag)
			{
				this.jb脚本Text.Text = "不启动";
			}
		}

		public void GB关闭程序(int 句柄)
		{
			ZJ主界面.PostMessage(句柄, 16, 0, 0);
			ZJ主界面.PostMessage(句柄, 18, 0, 0);
			ZJ主界面.PostMessage(句柄, 274, 61536, 0);
		}

		public void GB关闭当前窗口(int 句柄)
		{
			ZJ主界面.PostMessage(句柄, 16, 0, 0);
		}

		public void HQ获取进程外挂数据(bool 重置监控数据)
		{
			int num;
			int num11;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_0A:
				int num2 = 2;
				bool flag = Operators.CompareString(QJ全局声明.FW服务器信息参数.IP地址_外网, "下线", false) == 0;
				if (!flag)
				{
					goto IL_31;
				}
				IL_2B:
				goto IL_8D9;
				IL_31:
				num2 = 5;
				Application.DoEvents();
				IL_3A:
				num2 = 6;
				int index = this.jk监控list.SelectedIndices[0];
				IL_4F:
				num2 = 7;
				this.jb句柄list.Items.Clear();
				IL_63:
				num2 = 8;
				this.jk监控list.Items.Clear();
				IL_77:
				num2 = 9;
				if (!重置监控数据)
				{
					goto IL_97;
				}
				IL_82:
				num2 = 10;
				this.jk监控账号list.Items.Clear();
				IL_97:
				num2 = 12;
				string text = new string('\0', 255);
				IL_A7:
				num2 = 13;
				long num3 = (long)ZJ主界面.GetDesktopWindow();
				IL_B2:
				num2 = 14;
				num3 = (long)ZJ主界面.GetWindow(checked((int)num3), 5);
				IL_C0:
				checked
				{
					while (true)
					{
						IL_51A:
						num2 = 16;
						if (num3 == 0L)
						{
							break;
						}
						IL_C5:
						num2 = 17;
						ZJ主界面.GetWindowText((IntPtr)num3, ref text, Strings.Len(text));
						IL_DD:
						num2 = 18;
						flag = (Operators.CompareString(Strings.Left(text, 1), "\0", false) != 0);
						if (flag)
						{
							IL_102:
							num2 = 19;
							string @string = Strings.Left(text, Strings.InStr(text, "\0", CompareMethod.Binary) - 1);
							IL_11C:
							num2 = 20;
							flag = ((Strings.InStr(@string, "Assa8.0sf", CompareMethod.Binary) | Strings.InStr(@string, "Assa-", CompareMethod.Binary) | Strings.InStr(@string, "Assa8.0VipSF", CompareMethod.Binary)) != 0);
							if (flag)
							{
								IL_155:
								num2 = 21;
								ZJ主界面.JK监控列表数据 jK监控列表数据;
								jK监控列表数据.JS角色名称 = this.HQ获取句柄标题(this.JB句柄定位(this.JB句柄定位(this.JB句柄定位(num3, 8L), 1L), 8L));
								IL_17F:
								num2 = 22;
								flag = (Operators.CompareString(jK监控列表数据.JS角色名称, "官方网站", false) != 0);
								if (flag)
								{
									IL_1A4:
									num2 = 23;
									jK监控列表数据.ZH账号 = this.Z找账号(jK监控列表数据.JS角色名称);
									IL_1BC:
									num2 = 24;
									jK监控列表数据.JB脚本名称 = this.Z找脚本(jK监控列表数据.JS角色名称);
									IL_1D4:
									num2 = 25;
									jK监控列表数据.DJ等级 = this.CongDLL.JQ截取文本(this.HQ获取句柄标题((long)Math.Round(Conversion.Val(this.HQ获取句柄标题(this.JB句柄定位(this.JB句柄定位(this.JB句柄定位(num3, 11L), 2L), 1L))))).ToUpper(), "LV:", "(");
									IL_22A:
									num2 = 26;
									jK监控列表数据.XL血量 = this.CongDLL.JQ截取文本(this.HQ获取句柄标题((long)Math.Round(Conversion.Val(this.HQ获取句柄标题(this.JB句柄定位(this.JB句柄定位(this.JB句柄定位(num3, 11L), 2L), 1L))))).ToUpper(), "(", ")");
									IL_280:
									num2 = 27;
									jK监控列表数据.QL气力 = Strings.Mid(this.HQ获取句柄标题((long)Math.Round(Conversion.Val(this.HQ获取句柄标题(this.JB句柄定位(this.JB句柄定位(this.JB句柄定位(num3, 11L), 2L), 1L))))).ToUpper(), Strings.InStr(this.HQ获取句柄标题((long)Math.Round(Conversion.Val(this.HQ获取句柄标题(this.JB句柄定位(this.JB句柄定位(this.JB句柄定位(num3, 11L), 2L), 1L))))).ToUpper(), "MP:", CompareMethod.Binary) + 3);
									IL_309:
									num2 = 28;
									this.jk监控list.Items.Add(Conversions.ToString(this.jk监控list.Items.Count + 1));
									IL_335:
									num2 = 29;
									this.jk监控list.Items[this.jk监控list.Items.Count - 1].SubItems.Add(jK监控列表数据.ZH账号);
									IL_36D:
									num2 = 30;
									this.jk监控list.Items[this.jk监控list.Items.Count - 1].SubItems.Add(jK监控列表数据.JS角色名称);
									IL_3A5:
									num2 = 31;
									this.jk监控list.Items[this.jk监控list.Items.Count - 1].SubItems.Add(jK监控列表数据.JB脚本名称);
									IL_3DD:
									num2 = 32;
									this.jk监控list.Items[this.jk监控list.Items.Count - 1].SubItems.Add(jK监控列表数据.DJ等级);
									IL_415:
									num2 = 33;
									this.jk监控list.Items[this.jk监控list.Items.Count - 1].SubItems.Add(jK监控列表数据.XL血量);
									IL_44D:
									num2 = 34;
									this.jk监控list.Items[this.jk监控list.Items.Count - 1].SubItems.Add(jK监控列表数据.QL气力);
									IL_485:
									num2 = 35;
									this.jb句柄list.Items.Add(num3);
									IL_4A0:
									num2 = 36;
									flag = !this.jk监控账号list.Items.Contains(jK监控列表数据.JS角色名称);
									if (flag)
									{
										IL_4C4:
										num2 = 37;
										this.jk监控账号list.Items.Add(jK监控列表数据.JS角色名称);
									}
								}
								IL_4E0:
								IL_4E1:
								num2 = 40;
								flag = (Strings.InStr(@string, "响应", CompareMethod.Binary) != 0);
								if (flag)
								{
									IL_4FB:
									num2 = 41;
									this.GB关闭程序((int)num3);
								}
								IL_508:;
							}
							IL_509:;
						}
						IL_50A:
						IL_50B:
						num2 = 45;
						num3 = unchecked((long)ZJ主界面.GetWindow(checked((int)num3), 2));
						IL_519:;
					}
					IL_52F:
					num2 = 47;
					this.jk监控list.Items[index].Selected = true;
					IL_54B:
					num2 = 48;
					flag = (Operators.CompareString(this.Button11.Text, "重置监控数据", false) != 0);
					if (!flag)
					{
						goto IL_577;
					}
					IL_571:
					goto IL_8D9;
					IL_577:
					num2 = 51;
					flag = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) != 0);
					if (!flag)
					{
						goto IL_5A3;
					}
					IL_59D:
					goto IL_8D9;
					IL_5A3:
					num2 = 54;
					int arg_5BC_0 = 0;
					int num4 = this.jk监控账号list.Items.Count - 1;
					int num5 = arg_5BC_0;
					bool flag3;
					while (true)
					{
						int arg_704_0 = num5;
						int num6 = num4;
						if (arg_704_0 > num6)
						{
							break;
						}
						IL_5C3:
						num2 = 55;
						bool flag2 = false;
						IL_5CA:
						num2 = 56;
						int arg_5E3_0 = 0;
						int num7 = this.jk监控list.Items.Count - 1;
						int num8 = arg_5E3_0;
						while (true)
						{
							int arg_645_0 = num8;
							num6 = num7;
							if (arg_645_0 > num6)
							{
								break;
							}
							IL_5E7:
							num2 = 57;
							flag = Operators.ConditionalCompareObjectEqual(this.jk监控list.Items[num8].SubItems[2].Text, this.jk监控账号list.Items[num5], false);
							if (flag)
							{
								IL_62B:
								num2 = 58;
								flag2 = true;
							}
							IL_632:
							num2 = 60;
							num8++;
						}
						IL_647:
						num2 = 61;
						flag = !flag2;
						if (flag)
						{
							IL_659:
							num2 = 62;
							int arg_672_0 = 0;
							int num9 = this.gl账号管理list.Items.Count - 1;
							int num10 = arg_672_0;
							while (true)
							{
								int arg_6EE_0 = num10;
								num6 = num9;
								if (arg_6EE_0 > num6)
								{
									break;
								}
								IL_676:
								num2 = 63;
								flag3 = Operators.ConditionalCompareObjectEqual(this.Z找账号(Conversions.ToString(this.jk监控账号list.Items[num5])), this.gl账号管理list.Items[num10], false);
								if (flag3)
								{
									IL_6B5:
									num2 = 64;
									this.gl账号管理list.SetItemChecked(num10, true);
									IL_6C8:
									num2 = 65;
									this.Dq当前异常账号++;
								}
								IL_6DA:
								IL_6DB:
								num2 = 67;
								num10++;
							}
						}
						IL_6F0:
						IL_6F1:
						num2 = 69;
						num5++;
					}
					IL_709:
					num2 = 70;
					flag3 = (this.Dq当前异常账号 > 0 & !this.DJ倒计时中);
					if (!flag3)
					{
						goto IL_74A;
					}
					IL_726:
					num2 = 71;
					Thread thread = new Thread(new ThreadStart(this.DJ倒计时异常_线程));
					IL_73E:
					num2 = 72;
					thread.Start();
					IL_74A:
					IL_74B:
					goto IL_8D9;
					IL_754:;
				}
				int arg_75B_0 = num11 + 1;
				num11 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_75B_0);
				IL_88C:
				goto IL_8CE;
				num11 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_8AA:
				goto IL_8CE;
			}
			object arg_8AC_0;
			endfilter(arg_8AC_0 is Exception & num != 0 & num11 == 0);
			IL_8CE:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_8D9:
			if (num11 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		public void DJ倒计时异常_线程()
		{
			this.DJ倒计时中 = true;
			this.Button11.Text = "重置监控数据-倒计时";
			this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
			this.XR写日志("检测账号异常，倒计时10秒重启，若不启动按[重置监控数据]！", Color.FromArgb(255, 0, 0), true);
			bool flag = Operators.CompareString(this.Button11.Text, "重置监控数据-倒计时", false) != 0;
			if (!flag)
			{
				Thread.Sleep(1000);
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				this.XR写日志("检测账号异常，倒计时9秒重启，若不启动按[重置监控数据]！", Color.FromArgb(255, 25, 0), true);
				flag = (Operators.CompareString(this.Button11.Text, "重置监控数据-倒计时", false) != 0);
				if (!flag)
				{
					Thread.Sleep(1000);
					this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
					this.XR写日志("检测账号异常，倒计时8秒重启，若不启动按[重置监控数据]！", Color.FromArgb(255, 50, 0), true);
					flag = (Operators.CompareString(this.Button11.Text, "重置监控数据-倒计时", false) != 0);
					if (!flag)
					{
						Thread.Sleep(1000);
						this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
						this.XR写日志("检测账号异常，倒计时7秒重启，若不启动按[重置监控数据]！", Color.FromArgb(255, 75, 0), true);
						flag = (Operators.CompareString(this.Button11.Text, "重置监控数据-倒计时", false) != 0);
						if (!flag)
						{
							Thread.Sleep(1000);
							this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
							this.XR写日志("检测账号异常，倒计时6秒重启，若不启动按[重置监控数据]！", Color.FromArgb(255, 100, 0), true);
							flag = (Operators.CompareString(this.Button11.Text, "重置监控数据-倒计时", false) != 0);
							if (!flag)
							{
								Thread.Sleep(1000);
								this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
								this.XR写日志("检测账号异常，倒计时5秒重启，若不启动按[重置监控数据]！", Color.FromArgb(255, 125, 0), true);
								flag = (Operators.CompareString(this.Button11.Text, "重置监控数据-倒计时", false) != 0);
								if (!flag)
								{
									Thread.Sleep(1000);
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
									this.XR写日志("检测账号异常，倒计时4秒重启，若不启动按[重置监控数据]！", Color.FromArgb(255, 150, 0), true);
									flag = (Operators.CompareString(this.Button11.Text, "重置监控数据-倒计时", false) != 0);
									if (!flag)
									{
										Thread.Sleep(1000);
										this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
										this.XR写日志("检测账号异常，倒计时3秒重启，若不启动按[重置监控数据]！", Color.FromArgb(255, 175, 0), true);
										flag = (Operators.CompareString(this.Button11.Text, "重置监控数据-倒计时", false) != 0);
										if (!flag)
										{
											Thread.Sleep(1000);
											this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
											this.XR写日志("检测账号异常，倒计时2秒重启，若不启动按[重置监控数据]！", Color.FromArgb(255, 200, 0), true);
											flag = (Operators.CompareString(this.Button11.Text, "重置监控数据-倒计时", false) != 0);
											if (!flag)
											{
												Thread.Sleep(1000);
												this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
												this.XR写日志("检测账号异常，倒计时1秒重启，若不启动按[重置监控数据]！", Color.FromArgb(255, 225, 0), true);
												flag = (Operators.CompareString(this.Button11.Text, "重置监控数据-倒计时", false) != 0);
												if (!flag)
												{
													Thread.Sleep(1000);
													this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
													this.XR写日志("有 " + Conversions.ToString(this.Dq当前异常账号) + " 个账号异常！正在启动！", Color.FromArgb(255, 0, 0), true);
													this.Button5_Click(null, null);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			this.Button11.Text = "重置监控数据";
			this.Dq当前异常账号 = 0;
			this.DJ倒计时中 = false;
		}

		public string Z找账号(string 角色名称)
		{
			int arg_15_0 = 0;
			checked
			{
				int num = this.js角色list.Items.Count - 1;
				int num2 = arg_15_0;
				while (true)
				{
					int arg_61_0 = num2;
					int num3 = num;
					if (arg_61_0 > num3)
					{
						goto Block_2;
					}
					bool flag = Strings.InStr(Conversions.ToString(this.js角色list.Items[num2]), 角色名称, CompareMethod.Binary) != 0;
					if (flag)
					{
						break;
					}
					num2++;
				}
				string result = Conversions.ToString(this.zh账号list.Items[num2]);
				return result;
				Block_2:
				result = "角色不在监控";
				return result;
			}
		}

		public string Z找脚本(string 角色名称)
		{
			int arg_15_0 = 0;
			checked
			{
				int num = this.js角色list.Items.Count - 1;
				int num2 = arg_15_0;
				while (true)
				{
					int arg_61_0 = num2;
					int num3 = num;
					if (arg_61_0 > num3)
					{
						goto Block_2;
					}
					bool flag = Strings.InStr(Conversions.ToString(this.js角色list.Items[num2]), 角色名称, CompareMethod.Binary) != 0;
					if (flag)
					{
						break;
					}
					num2++;
				}
				string result = Conversions.ToString(this.jb脚本list.Items[num2]);
				return result;
				Block_2:
				result = "无数据";
				return result;
			}
		}

		private void Button11_Click(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(this.Button11.Text, "重置监控数据", false) == 0;
			if (flag)
			{
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				this.XR写日志("重置监控数据，只监控当前已经启动的外挂", Color.FromArgb(255, 255, 255), true);
			}
			else
			{
				this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
				this.XR写日志("关闭倒计时并且刷新，只监控当前已经启动的外挂", Color.FromArgb(255, 255, 255), true);
			}
			int arg_E2_0 = 0;
			checked
			{
				int num = this.gl账号管理list.Items.Count - 1;
				int num2 = arg_E2_0;
				while (true)
				{
					int arg_FE_0 = num2;
					int num3 = num;
					if (arg_FE_0 > num3)
					{
						break;
					}
					this.gl账号管理list.SetItemChecked(num2, false);
					num2++;
				}
				this.Button11.Text = "重置监控数据";
				flag = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
				if (flag)
				{
					this.HQ获取进程外挂数据(true);
				}
				flag = this.JK监控打开;
				if (!flag)
				{
					Thread thread = new Thread(new ThreadStart(this.QC全程监控刷新数据_线程));
					thread.Start();
				}
			}
		}

		public void QC全程监控刷新数据_线程()
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				this.JK监控打开 = true;
				IL_12:
				while (true)
				{
					IL_13:
					num2 = 4;
					Thread.Sleep(10000);
					IL_20:
					num2 = 5;
					bool flag = Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0;
					if (flag)
					{
						IL_3F:
						num2 = 6;
						this.HQ获取进程外挂数据(false);
					}
					IL_49:
					num2 = 8;
					Application.DoEvents();
					IL_51:;
				}
				IL_53:
				goto IL_D8;
				IL_5B:
				int arg_60_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_60_0);
				IL_91:
				goto IL_CD;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_AB:
				goto IL_CD;
			}
			object arg_AD_0;
			endfilter(arg_AD_0 is Exception & num != 0 & num3 == 0);
			IL_CD:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_D8:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(QJ全局声明.FW服务器信息参数.IP地址_外网, "下线", false) == 0;
			if (!flag)
			{
				Thread thread = new Thread(new ThreadStart(this.GX更新在线状态_线程));
				thread.Start();
			}
		}

		[MethodImpl((MethodImplOptions)72)]
		public void GX更新在线状态_线程()
		{
			string connectionString = "Server=581f1d4f3a63a.gz.cdb.myqcloud.com;User ID=youke;Password=gELbb8pKJAlPQFbV;Database=test;port=3817;";
			MySqlConnection mySqlConnection = new MySqlConnection(connectionString);
			try
			{
				mySqlConnection.Open();
				string cmdText = string.Concat(new string[]
				{
					"UPDATE 机器码验证 SET 状态 = '",
					Conversions.ToString(DateAndTime.Now),
					"' WHERE 机器码 = '",
					QJ全局声明.FW服务器信息参数.JQ机器码,
					"'"
				});
				MySqlCommand selectCommand = new MySqlCommand(cmdText, mySqlConnection);
				MySqlDataAdapter mySqlDataAdapter = new MySqlDataAdapter(selectCommand);
				DataSet dataSet = new DataSet();
				mySqlDataAdapter.Fill(dataSet);
				mySqlConnection.Close();
			}
			catch (Exception expr_8C)
			{
				ProjectData.SetProjectError(expr_8C);
				mySqlConnection.Close();
				ProjectData.ClearProjectError();
			}
			checked
			{
				try
				{
					mySqlConnection.Open();
					string cmdText2 = "select * from 机器码验证 where 机器码 = '" + QJ全局声明.FW服务器信息参数.JQ机器码 + " '";
					MySqlCommand selectCommand2 = new MySqlCommand(cmdText2, mySqlConnection);
					MySqlDataAdapter mySqlDataAdapter2 = new MySqlDataAdapter(selectCommand2);
					DataSet dataSet2 = new DataSet();
					mySqlDataAdapter2.Fill(dataSet2);
					bool flag = QJ全局声明.FW服务器信息参数.XL线路 == 0;
					string columnName;
					string columnName2;
					if (flag)
					{
						columnName = "许可";
						columnName2 = "IP地址";
					}
					flag = (QJ全局声明.FW服务器信息参数.XL线路 == 1);
					if (flag)
					{
						columnName = "许可2";
						columnName2 = "IP地址2";
					}
					flag = (QJ全局声明.FW服务器信息参数.XL线路 == 2);
					if (flag)
					{
						columnName = "许可3";
						columnName2 = "IP地址3";
					}
					flag = (dataSet2.Tables[0].Rows.Count > 0);
					if (flag)
					{
						try
						{
							IEnumerator enumerator = dataSet2.Tables[0].Rows.GetEnumerator();
							while (enumerator.MoveNext())
							{
								DataRow dataRow = (DataRow)enumerator.Current;
								bool flag2 = Operators.ConditionalCompareObjectNotEqual(dataRow[columnName], "开", false);
								if (flag2)
								{
									int arg_1D0_0 = 0;
									int num = this.jb句柄list.Items.Count - 1;
									int num2 = arg_1D0_0;
									while (true)
									{
										int arg_20C_0 = num2;
										int num3 = num;
										if (arg_20C_0 > num3)
										{
											break;
										}
										this.GB关闭程序((int)Math.Round(Conversion.Val(RuntimeHelpers.GetObjectValue(this.jb句柄list.Items[num2]))));
										num2++;
									}
									QJ全局声明.FW服务器信息参数.IP地址_外网 = "下线";
									this.Button11_Click(null, null);
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										this.HQ获取进程外挂数据(false);
									}
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
									this.XR写日志("你被其他用户强行踢下线！", Color.FromArgb(255, 255, 255), true);
									Interaction.MsgBox("你被其他用户强行踢下线！", MsgBoxStyle.Critical, "信息");
									ProjectData.EndApp();
								}
								flag2 = Operators.ConditionalCompareObjectNotEqual(dataRow[columnName2], QJ全局声明.FW服务器信息参数.IP地址_外网, false);
								if (flag2)
								{
									int arg_2F3_0 = 0;
									int num4 = this.jb句柄list.Items.Count - 1;
									int num5 = arg_2F3_0;
									while (true)
									{
										int arg_32F_0 = num5;
										int num3 = num4;
										if (arg_32F_0 > num3)
										{
											break;
										}
										this.GB关闭程序((int)Math.Round(Conversion.Val(RuntimeHelpers.GetObjectValue(this.jb句柄list.Items[num5]))));
										num5++;
									}
									QJ全局声明.FW服务器信息参数.IP地址_外网 = "下线";
									this.Button11_Click(null, null);
									flag2 = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
									if (flag2)
									{
										this.HQ获取进程外挂数据(false);
									}
									this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
									this.XR写日志("你被其他用户强行踢下线！", Color.FromArgb(255, 255, 255), true);
									Interaction.MsgBox("你被其他用户强行踢下线！", MsgBoxStyle.Critical, "信息");
									ProjectData.EndApp();
								}
							}
						}
						finally
						{
							IEnumerator enumerator;
							bool flag2 = enumerator is IDisposable;
							if (flag2)
							{
								(enumerator as IDisposable).Dispose();
							}
						}
						mySqlConnection.Close();
					}
					else
					{
						mySqlConnection.Close();
					}
				}
				catch (Exception expr_42C)
				{
					ProjectData.SetProjectError(expr_42C);
					mySqlConnection.Close();
					ProjectData.ClearProjectError();
				}
			}
		}

		private void 托盘显示界面_Click(object sender, EventArgs e)
		{
			this.Show();
		}

		private void 托盘隐藏界面_Click(object sender, EventArgs e)
		{
			this.Hide();
		}

		private void 托盘关于梦幻执事_Click(object sender, EventArgs e)
		{
			this.HS函数集.DK打开URL("http://user.qzone.qq.com/27485203/blog/1478676357");
		}

		private void 托盘反馈_Click(object sender, EventArgs e)
		{
			this.HS函数集.DK打开URL("tencent://Message/?Uin=27485203&websiteName=q-zone.qq.com&Menu=yes");
		}

		[MethodImpl((MethodImplOptions)72)]
		private void 托盘退出_Click(object sender, EventArgs e)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				bool flag = Interaction.MsgBox("确定要退出【监控软件】吗?", MsgBoxStyle.YesNo, null) == MsgBoxResult.No;
				if (!flag)
				{
					goto IL_21;
				}
				IL_1E:
				goto IL_96;
				IL_21:
				ProjectData.EndApp();
				IL_28:
				goto IL_96;
				IL_2D:
				int arg_32_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_32_0);
				IL_4F:
				goto IL_8B;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_69:
				goto IL_8B;
			}
			object arg_6B_0;
			endfilter(arg_6B_0 is Exception & num != 0 & num3 == 0);
			IL_8B:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_96:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void NotifyIcon1_MouseDown(object sender, MouseEventArgs e)
		{
			bool flag = e.Button == MouseButtons.Left;
			if (flag)
			{
				this.Show();
			}
		}

		private void Button14_Click(object sender, EventArgs e)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				bool flag = this.jb句柄list.SelectedIndex >= 0;
				if (!flag)
				{
					goto IL_55;
				}
				IL_22:
				num2 = 3;
				checked
				{
					ZJ主界面.JH激活句柄((int)Math.Round(Conversion.Val(RuntimeHelpers.GetObjectValue(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]))));
					IL_55:
					num2 = 5;
					_ZH主函数 arg_92_0 = this.CongDLL;
					int arg_92_1 = (int)this.ZX找寻句柄(Conversions.ToLong(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]), "隐藏石器");
					byte arg_92_2 = 1;
					string text = "Pos";
					arg_92_0.SZ设置复选框(arg_92_1, arg_92_2, ref text);
					IL_98:
					num2 = 6;
					Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 50f))));
					IL_B4:
					num2 = 7;
					_ZH主函数 arg_F0_0 = this.CongDLL;
					int arg_F0_1 = (int)this.ZX找寻句柄(Conversions.ToLong(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]), "隐藏窗口");
					text = "Pos";
					arg_F0_0.MN模拟后台按下(arg_F0_1, ref text);
					IL_F6:
					goto IL_170;
					IL_FB:;
				}
				int arg_100_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_100_0);
				IL_129:
				goto IL_165;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_143:
				goto IL_165;
			}
			object arg_145_0;
			endfilter(arg_145_0 is Exception & num != 0 & num3 == 0);
			IL_165:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_170:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void Button19_Click(object sender, EventArgs e)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				bool flag = this.jb句柄list.SelectedIndex < 0;
				if (!flag)
				{
					goto IL_25;
				}
				IL_1F:
				goto IL_1E9;
				IL_25:
				num2 = 5;
				checked
				{
					this.CongDLL.XS显示窗口((int)Math.Round(Conversion.Val(RuntimeHelpers.GetObjectValue(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]))));
					IL_5E:
					num2 = 6;
					Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 100f))));
					IL_7A:
					num2 = 7;
					_ZH主函数 arg_B6_0 = this.CongDLL;
					int arg_B6_1 = (int)this.ZX找寻句柄(Conversions.ToLong(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]), "副控");
					string text = "Pos";
					arg_B6_0.MN模拟后台按下(arg_B6_1, ref text);
					IL_BC:
					num2 = 8;
					_ZH主函数 arg_F9_0 = this.CongDLL;
					int arg_F9_1 = (int)this.ZX找寻句柄(Conversions.ToLong(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]), "隐藏石器");
					byte arg_F9_2 = 1;
					text = "Pos";
					arg_F9_0.SZ设置复选框(arg_F9_1, arg_F9_2, ref text);
					IL_FF:
					num2 = 9;
					Thread.Sleep((int)Math.Round((double)(unchecked(this.JS加速 * 10f))));
					IL_11C:
					num2 = 10;
					_ZH主函数 arg_15A_0 = this.CongDLL;
					int arg_15A_1 = (int)this.ZX找寻句柄(Conversions.ToLong(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]), "隐藏石器");
					byte arg_15A_2 = 0;
					text = "Pos";
					arg_15A_0.SZ设置复选框(arg_15A_1, arg_15A_2, ref text);
					IL_160:
					goto IL_1E9;
					IL_168:;
				}
				int arg_16D_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_16D_0);
				IL_1A2:
				goto IL_1DE;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_1BC:
				goto IL_1DE;
			}
			object arg_1BE_0;
			endfilter(arg_1BE_0 is Exception & num != 0 & num3 == 0);
			IL_1DE:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_1E9:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void Button12_Click(object sender, EventArgs e)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				bool flag = this.jb句柄list.SelectedIndex >= 0;
				if (!flag)
				{
					goto IL_55;
				}
				IL_22:
				num2 = 3;
				checked
				{
					ZJ主界面.JH激活句柄((int)Math.Round(Conversion.Val(RuntimeHelpers.GetObjectValue(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]))));
					IL_55:
					num2 = 5;
					_ZH主函数 arg_91_0 = this.CongDLL;
					int arg_91_1 = (int)this.ZX找寻句柄(Conversions.ToLong(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]), "战斗设置");
					string text = "sen";
					arg_91_0.MN模拟后台按下(arg_91_1, ref text);
					IL_97:
					goto IL_109;
					IL_9C:;
				}
				int arg_A1_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_A1_0);
				IL_C2:
				goto IL_FE;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_DC:
				goto IL_FE;
			}
			object arg_DE_0;
			endfilter(arg_DE_0 is Exception & num != 0 & num3 == 0);
			IL_FE:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_109:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void Button9_Click(object sender, EventArgs e)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				bool flag = this.jb句柄list.SelectedIndex >= 0;
				if (!flag)
				{
					goto IL_55;
				}
				IL_22:
				num2 = 3;
				checked
				{
					ZJ主界面.JH激活句柄((int)Math.Round(Conversion.Val(RuntimeHelpers.GetObjectValue(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]))));
					IL_55:
					num2 = 5;
					_ZH主函数 arg_91_0 = this.CongDLL;
					int arg_91_1 = (int)this.ZX找寻句柄(Conversions.ToLong(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]), "资料显示");
					string text = "sen";
					arg_91_0.MN模拟后台按下(arg_91_1, ref text);
					IL_97:
					goto IL_109;
					IL_9C:;
				}
				int arg_A1_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_A1_0);
				IL_C2:
				goto IL_FE;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_DC:
				goto IL_FE;
			}
			object arg_DE_0;
			endfilter(arg_DE_0 is Exception & num != 0 & num3 == 0);
			IL_FE:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_109:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void Button8_Click(object sender, EventArgs e)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				bool flag = this.jb句柄list.SelectedIndex >= 0;
				if (!flag)
				{
					goto IL_54;
				}
				IL_20:
				num2 = 3;
				this.GB关闭程序(checked((int)Math.Round(Conversion.Val(RuntimeHelpers.GetObjectValue(this.jb句柄list.Items[this.jb句柄list.SelectedIndex])))));
				IL_54:
				num2 = 5;
				Thread.Sleep(500);
				IL_61:
				num2 = 6;
				flag = (Operators.CompareString(this.Button5.Text, "一键启动（F4）", false) == 0);
				if (!flag)
				{
					goto IL_8A;
				}
				IL_80:
				num2 = 7;
				this.HQ获取进程外挂数据(false);
				IL_8A:
				goto IL_104;
				IL_8F:
				int arg_94_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_94_0);
				IL_BD:
				goto IL_F9;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_D7:
				goto IL_F9;
			}
			object arg_D9_0;
			endfilter(arg_D9_0 is Exception & num != 0 & num3 == 0);
			IL_F9:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_104:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void Button16_Click(object sender, EventArgs e)
		{
			ZH主函数 zH主函数 = new ZH主函数Class();
			_ZH主函数 arg_1A_0 = this.CongDLL;
			int num = 7539834;
			int num2 = 40;
			arg_1A_0.MN模拟按下键盘_后台(ref num, ref num2);
			Interaction.MsgBox(zH主函数.HQ获取树节点名称(7539834), MsgBoxStyle.OkOnly, null);
		}

		private void Button17_Click(object sender, EventArgs e)
		{
			int num;
			int num10;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_0A:
				int num2 = 2;
				string text = "";
				IL_13:
				num2 = 3;
				long num3 = this.JB句柄定位(this.JB句柄定位(Conversions.ToLong(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]), 10L), 9L);
				IL_49:
				num2 = 4;
				int arg_5C_0 = 0;
				checked
				{
					int num4 = this.CongDLL.HQ获取list数量((int)num3);
					int num5 = arg_5C_0;
					while (true)
					{
						int arg_8B_0 = num5;
						int num6 = num4;
						if (arg_8B_0 > num6)
						{
							break;
						}
						IL_5F:
						num2 = 5;
						text = text + this.CongDLL.HQ获取list当前位置内容((int)num3, num5) + "\r\n";
						IL_7C:
						num2 = 6;
						num5++;
					}
					IL_8D:
					num2 = 7;
					bool flag = Operators.CompareString(Strings.Trim(text), "", false) == 0 | Strings.Asc(Strings.Trim(text)) == 13 | Strings.Asc(Strings.Trim(text)) == 10;
					if (!flag)
					{
						goto IL_14E;
					}
					IL_CD:
					num2 = 8;
					long num7 = this.JB句柄定位(this.JB句柄定位(Conversions.ToLong(this.jb句柄list.Items[this.jb句柄list.SelectedIndex]), 10L), 7L);
					IL_102:
					num2 = 9;
					int arg_116_0 = 0;
					int num8 = this.CongDLL.HQ获取list数量((int)num7);
					int num9 = arg_116_0;
					while (true)
					{
						int arg_14C_0 = num9;
						int num6 = num8;
						if (arg_14C_0 > num6)
						{
							break;
						}
						IL_11A:
						num2 = 10;
						text = text + this.CongDLL.HQ获取list当前位置内容((int)num7, num9) + "\r\n";
						IL_139:
						num2 = 11;
						num9++;
					}
					IL_14E:
					IL_14F:
					num2 = 13;
					MyProject.Forms.JB脚本破解.Show();
					IL_163:
					num2 = 14;
					MyProject.Forms.JB脚本破解.TextBox1.Text = text;
					IL_17D:
					goto IL_21F;
					IL_186:;
				}
				int arg_18D_0 = num10 + 1;
				num10 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_18D_0);
				IL_1D2:
				goto IL_214;
				num10 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_1F0:
				goto IL_214;
			}
			object arg_1F2_0;
			endfilter(arg_1F2_0 is Exception & num != 0 & num10 == 0);
			IL_214:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_21F:
			if (num10 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void Button18_Click(object sender, EventArgs e)
		{
			bool flag = this.gl账号管理list.CheckedItems.Count == 0;
			checked
			{
				if (flag)
				{
					Interaction.MsgBox("账号管理中没有批量修改的账号\r\n请在需要修改的账号前打勾√", MsgBoxStyle.Information, "信息");
				}
				else
				{
					flag = (Interaction.MsgBox("是否执行批量操作？", MsgBoxStyle.YesNo | MsgBoxStyle.Information, "信息") == MsgBoxResult.No);
					if (!flag)
					{
						int arg_68_0 = 0;
						int num = this.gl账号管理list.Items.Count - 1;
						int num2 = arg_68_0;
						while (true)
						{
							int arg_18F_0 = num2;
							int num3 = num;
							if (arg_18F_0 > num3)
							{
								break;
							}
							flag = this.gl账号管理list.GetItemChecked(num2);
							if (flag)
							{
								this.zj主机list.Items[num2] = this.ComboBox1.SelectedIndex;
								this.fj副机list.Items[num2] = this.ComboBox2.SelectedIndex;
								this.rw人物list.Items[num2] = this.ComboBox3.SelectedIndex;
								this.pz配置list.Items[num2] = this.pz配置Text.Text;
								this.jb脚本list.Items[num2] = this.jb脚本Text.Text;
								this.XR写日志(DateTime.Now.ToString("yyyy年MM月dd HH时mm分ss秒 ") + "[系统]：", Color.FromArgb(150, 255, 0), false);
								this.XR写日志("修改账号： " + this.zh账号Text.Text, Color.FromArgb(255, 255, 10), true);
							}
							num2++;
						}
						this.BC保存数据();
						this.CS参数保存();
					}
				}
			}
		}

		[DebuggerStepThrough, CompilerGenerated]
		private void _Lambda$__1(object a0, EventArgs a1)
		{
			this.jk监控list_按下();
		}
	}
}
